<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>www.prakashsurya.com</title>
    <link>https://www.prakashsurya.com/index.xml</link>
    <description>Recent content on www.prakashsurya.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 26 Sep 2017 00:00:00 -0800</lastBuildDate>
    <atom:link href="https://www.prakashsurya.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>ZFS on Linux Code Coverage</title>
      <link>https://www.prakashsurya.com/post/2017-09-26-zfs-on-linux-code-coverage/</link>
      <pubDate>Tue, 26 Sep 2017 00:00:00 -0800</pubDate>
      
      <guid>https://www.prakashsurya.com/post/2017-09-26-zfs-on-linux-code-coverage/</guid>
      <description>

&lt;h1 id=&#34;branches-pull-requests&#34;&gt;Branches + Pull Requests&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Code coverage data is collected for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;All commits merged to a branch (e.g. master)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;All pull requests for the &amp;ldquo;zfs&amp;rdquo; project&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Code coverage collected after running &lt;strong&gt;all&lt;/strong&gt; tests&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ztest, zfstest, zfsstress, etc.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Data generated using &lt;code&gt;make code-coverage-capture&lt;/code&gt; &amp;hellip;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Emits &lt;code&gt;.info&lt;/code&gt; file and static HTML pages&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;.info&lt;/code&gt; file uploaded to &lt;code&gt;codecov.io&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://codecov.io/gh/zfsonlinux/zfs&#34;&gt;ZFS on Linux + Codecov&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;user-kernel&#34;&gt;User + Kernel&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Code coverage data is collected for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;User mode execution (e.g. libzpool, zdb, etc.)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Kernel mode execution (e.g. &amp;ldquo;zfs&amp;rdquo; kernel module)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Same file &lt;em&gt;may&lt;/em&gt; be executed in user and kernel mode&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;e.g. libzpool references files in &amp;ldquo;modules&amp;rdquo; directories&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;User coverage enabled via &lt;code&gt;--enable-code-coverage&lt;/code&gt; option&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Kernel coverage enabled via custom kernel&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;More details &lt;a href=&#34;https://www.prakashsurya.com/post/2017-09-11-using-gcov-with-zfs-on-linux-kernel-modules/&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;codecov-header&#34;&gt;Codecov: Header&lt;/h1&gt;

&lt;p&gt;.center[&lt;img src=&#34;header.png&#34; alt=&#34;:scale 100%&#34; /&gt;]&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;codecov-diff&#34;&gt;Codecov: Diff&lt;/h1&gt;

&lt;p&gt;.center[&lt;img src=&#34;diff.png&#34; alt=&#34;:scale 100%&#34; /&gt;]&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;codecov-files&#34;&gt;Codecov: Files&lt;/h1&gt;

&lt;p&gt;.center[&lt;img src=&#34;files.png&#34; alt=&#34;:scale 100%&#34; /&gt;]&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;codecov-files-continued&#34;&gt;Codecov: Files (continued)&lt;/h1&gt;

&lt;p&gt;.center[&lt;img src=&#34;files-module-zfs.png&#34; alt=&#34;:scale 100%&#34; /&gt;]&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;codecov-flags&#34;&gt;Codecov: Flags&lt;/h1&gt;

&lt;p&gt;.center[&lt;img src=&#34;flags.png&#34; alt=&#34;:scale 100%&#34; /&gt;]&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;codecov-build&#34;&gt;Codecov: Build&lt;/h1&gt;

&lt;p&gt;.center[&lt;img src=&#34;build.png&#34; alt=&#34;:scale 100%&#34; /&gt;]&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;codecov-graphs&#34;&gt;Codecov: Graphs&lt;/h1&gt;

&lt;p&gt;.center[&lt;img src=&#34;graphs.png&#34; alt=&#34;:scale 100%&#34; /&gt;]&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;codecov-pr-comment&#34;&gt;Codecov: PR Comment&lt;/h1&gt;

&lt;p&gt;.center[&lt;img src=&#34;pr-comment.png&#34; alt=&#34;:scale 75%&#34; /&gt;]&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;coverage-integrated-w-commits-page&#34;&gt;Coverage Integrated w/ Commits Page&lt;/h1&gt;

&lt;p&gt;.center[&lt;img src=&#34;commits-page.png&#34; alt=&#34;:scale 100%&#34; /&gt;]&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python &#43; Jupyter for Performance Testing</title>
      <link>https://www.prakashsurya.com/post/2017-09-19-python-plus-jupyter-for-performance-testing/</link>
      <pubDate>Tue, 19 Sep 2017 00:00:00 -0800</pubDate>
      
      <guid>https://www.prakashsurya.com/post/2017-09-19-python-plus-jupyter-for-performance-testing/</guid>
      <description>

&lt;h1 id=&#34;setting-the-stage&#34;&gt;Setting the stage.&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Working on performance improvement to ZFS (sync writes)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To verify my changes, I needed to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Measure the performance of the system &lt;strong&gt;without&lt;/strong&gt; my changes.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Measure the performance of the system &lt;strong&gt;with&lt;/strong&gt; my changes.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Analyze the difference(s) in performance with and without my
changes.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Collect tangential information from the system, to support
(or refute) my conclusions.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;visualizations-required&#34;&gt;Visualizations required?&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;While not strictly required, visualizations are often powerful.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Flamegraphs for on-CPU Analysis.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Heatmaps and/or Histograms for multi-modal latency data.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Simple 2D line graphs for high level application metrics.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Thus, visualizations are &lt;em&gt;kind of&lt;/em&gt; required&amp;hellip;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Analysis is prohibitively difficult without them.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;performance-testing-overview&#34;&gt;Performance testing overview.&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Generally, performance testing takes the following approach:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Run some (usually known) workload.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Collect application and/or system metrics in some &amp;ldquo;random&amp;rdquo; format.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The format depends on the metric being collect.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Different metrics output data in different formats.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Consume metric data with a tool to generate visualizations.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Analyze raw data and/or visualizations to form conclusions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Analysis must be easy to share&amp;hellip;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;So it can be scrutinized by others.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Learn, Refine, Repeat.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;always-use-the-right-tool-for-the-job&#34;&gt;Always use the right tool for the job.&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Without proper tooling, any of the prior steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;can become tedious.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;can be done incorrectly (and lead to incorrect conclusions).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;can be insufficiently documented.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Without proper documentation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;mistakes can go unrecognized.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;methods cannot be shared.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;analysis cannot be scrutinized.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;conclusions can be forgotten.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;results cannot be reproduced.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The &amp;ldquo;right tool&amp;rdquo; must enable solutions to these complications.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;this-must-be-a-solved-problem-right&#34;&gt;This must be a solved problem&amp;hellip; right?&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Rather than re-invent the wheel, lets learn from my co-workers.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;What tools were used for past performance related work?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Excel&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Google Spreadsheets&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;How was data transferred into the spreadsheet?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;CSV file&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Copy/Paste&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Everything done in an ad-hoc basis, specific to each project.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Workload chosen by developer, using tools familiar to them.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Usually, all steps in the process undocumented (often forgotten).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;ok-google-spreadsheets-it-is-take-one&#34;&gt;OK, Google Spreadsheets it is&amp;hellip; take one.&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;fio&amp;rdquo; was used; it output metrics about the IO it performs:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  write: io=4171.3MB, bw=70549KB/s, iops=8818, runt= 60544msec
    clat (usec): min=680, max=2260.4K, avg=115400.25, stdev=214661.67
     lat (usec): min=681, max=2260.4K, avg=115401.19, stdev=214661.63
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;40 unique test configurations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;fio run with 10 different thread counts; 1 to 1024 threads.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;zpool used with 4 different disk counts; 1 to 8 disks.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;80 tests in total; 40 &lt;strong&gt;with&lt;/strong&gt; my changes, 40 &lt;strong&gt;without&lt;/strong&gt; my changes.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;For each test, I would manually copy/paste fio data into spreadsheet.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Graphs generated from the data was nice&amp;hellip;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Inputting data into the spreadsheet was terrible.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;end-result&#34;&gt;End result.&lt;/h1&gt;

&lt;p&gt;.center[```
iops    |    1   |    2   |     4   |     8   |     16   |     32   | &amp;hellip;
&amp;mdash;&amp;mdash;&amp;ndash;+&amp;mdash;&amp;mdash;&amp;ndash;+&amp;mdash;&amp;mdash;&amp;ndash;+&amp;mdash;&amp;mdash;&amp;mdash;+&amp;mdash;&amp;mdash;&amp;mdash;+&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;-
1 disk  | 164.79 | 328.89 |  672.61 | 1361.03 | 18414.90 | 19130.33 | &amp;hellip;
2 disks | 201.11 | 390.75 | 1171.71 | 1342.84 |  2630.02 |  5389.89 | &amp;hellip;
4 disks | 200.31 | 364.79 | 1184.56 | 2228.02 |  2677.17 |  5223.90 | &amp;hellip;
8 disks | 180.57 | 395.95 | 1158.49 | 1940.64 |  3602.46 |  5340.03 | &amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-]&#34;&gt;
.center[![:scale 85%](spreadsheet-iops.png)]

 - Would use a meeting to discuss results, share analysis, etc.

---

# Google Spreadsheets; take two.

 - &amp;quot;Take one&amp;quot; was lame... So, I started looking for ways to improve it.

 - Discovered that fio can output JSON data using &amp;quot;--output-format&amp;quot;.

 - Maybe that, combined with &amp;quot;jq&amp;quot; and some Bash would help?

 - Wrote a Bash script to:

    - iterate over all fio JSON output files

    - use jq to parse IOPs data for each test iteration

    - output CSV (to stdout) for all 40 test configurations

 - I would then manually copy/paste CSV data into spreadsheet.

 - Using a CSV file rather than copy/paste isn&#39;t much different.

---

# Same result; easier to generate.

.center[```
iops    |    1   |    2   |     4   |     8   |     16   |     32   | ...
--------+--------+--------+---------+---------+----------+----------+----
1 disk  | 164.79 | 328.89 |  672.61 | 1361.03 | 18414.90 | 19130.33 | ...
2 disks | 201.11 | 390.75 | 1171.71 | 1342.84 |  2630.02 |  5389.89 | ...
4 disks | 200.31 | 364.79 | 1184.56 | 2228.02 |  2677.17 |  5223.90 | ...
8 disks | 180.57 | 395.95 | 1158.49 | 1940.64 |  3602.46 |  5340.03 | ...
```]

.center[![:scale 85%](spreadsheet-iops.png)]

 - Still no supporting documentation to explain process or results.

---

background-image: url(spreadsheet-iops.png)

# Huh.. The blue line looks different.. Why?

---

# Application metrics is not sufficient.

 - Started looking at data from &amp;quot;iostat&amp;quot;

 - Used a script to:

    - log &amp;quot;iostat&amp;quot; output to a file for each test configuration...

    - then parse the output files for each configuration...

    - then output CSV to standard output.

 - CSV data would be manually copied into the spreadsheet

 - Now, there were copy/pasted tables (and graphs) for:

    - fio IOPs vs. fio threads

    - iostat &amp;quot;%b&amp;quot;, &amp;quot;actv&amp;quot;, &amp;quot;asvc_t&amp;quot;, and &amp;quot;w/s&amp;quot; (each vs. fio threads)

 - Starting to encroach on original problem; too much copy/paste.

---

# iostat&#39;s %b vs. fio threads

.center[```
   %b   |   1   |   2   |   4   |   8   |   16  |   32  | ...
--------+-------+-------+-------+-------+-------+-------+----
1 disk  | 81.68 | 80.37 | 97.40 | 99.42 | 99.42 | 99.42 | ...
2 disks | 38.93 | 38.36 | 48.25 | 91.25 | 88.07 | 77.83 | ...
4 disks | 19.52 | 19.47 | 24.08 | 42.15 | 78.91 | 82.66 | ...
8 disks |  9.96 |  9.54 | 12.00 | 21.02 | 36.17 | 71.26 | ...
```]

.center[![:scale 100%](spreadsheet-pct-b.png)]

---

# iostat&#39;s actv vs. fio threads

.center[```
  actv  |   1   |   2   |   4   |   8   |   16  |   32  | ...
--------+-------+-------+-------+-------+-------+-------+----
1 disk  |  0.81 |  0.81 |  1.00 |  2.00 |  3.57 |  7.39 | ...
2 disks |  0.40 |  0.39 |  0.49 |  0.93 |  1.66 |  2.77 | ...
4 disks |  0.19 |  0.20 |  0.24 |  0.42 |  0.80 |  1.43 | ...
8 disks |  0.10 |  0.10 |  0.12 |  0.21 |  0.36 |  0.72 | ...
```]

.center[![:scale 100%](spreadsheet-actv.png)]

---

# iostat&#39;s asvc_t vs. fio threads

.center[```
 asvc_t |   1   |   2   |   4   |   8   |   16  |   32  | ...
--------+-------+-------+-------+-------+-------+-------+----
1 disk  |  5.04 |  4.97 |  5.84 |  5.80 |  0.98 |  1.65 | ...
2 disks |  4.27 |  4.26 |  3.56 |  5.49 |  5.07 |  4.08 | ...
4 disks |  4.03 |  4.38 |  3.42 |  3.15 |  4.75 |  4.40 | ...
8 disks |  5.65 |  4.02 |  3.43 |  3.55 |  3.23 |  4.34 | ...
```]

.center[![:scale 100%](spreadsheet-asvc-t.png)]

---

# Spreadsheets: decent, but far from ideal.

 - Pros:

    - No setup required.

    - Visualizations helped understand data.

 - Cons:

    - Data input is manual and error prone.

    - Available visualizations can be limiting; e.g. flamegraphs?

    - Code is seperate from data/visualizations.

    - No way to review code/data for correctness.&amp;lt;sup&amp;gt;1&amp;lt;/sup&amp;gt;

    - No way to annotate data/visualizations with explanations.

.footnote[&amp;lt;sub&amp;gt;&amp;lt;sup&amp;gt;1&amp;lt;/sup&amp;gt;&amp;lt;sub&amp;gt;http://www.nytimes.com/2013/04/19/opinion/krugman-the-excel-depression.html&amp;lt;/sub&amp;gt;&amp;lt;/sub&amp;gt;]

---

# Is there a better way?

 - Spent some time googling around for different ideas/approaches.

 - Discovered Jupyter and Jupyter Notebooks.

 - With Jupyter, I am able to:

    - Generate complex visualizations using Python libraries

    - Perform data analysis using Python libraries

    - Embed text/explanations inline with visualizations

    - Embed python data analysis code directly in the notebook

---

# What is Jupyter?

- Excerpt taken from &amp;quot;What is Jupyter?&amp;quot; article&amp;lt;sup&amp;gt;1&amp;lt;/sup&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;

&lt;p&gt;But without attracting the hype, Jupyter Notebooks are revolutionizing
the way engineers and data scientists work together. If all important
work is collaborative, the most important tools we have are tools for
collaboration, tools that make working together more productive.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s what Jupyter is, in a nutshell: it&amp;rsquo;s a tool for collaborating.
It’s built for writing and sharing code and text, within the context of
a web page.&lt;/p&gt;

&lt;p&gt;&amp;hellip;&lt;/p&gt;

&lt;p&gt;Code is never just code. It&amp;rsquo;s part of a thought process, an argument,
even an experiment. This is particularly true for data analysis, but
it&amp;rsquo;s true for almost any application. Jupyter lets you build a &amp;ldquo;lab
notebook&amp;rdquo; that shows your work: the code, the data, the results, along
with your explanation and reasoning.&lt;/p&gt;

&lt;p&gt;&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
.footnote[&amp;lt;sub&amp;gt;&amp;lt;sup&amp;gt;1&amp;lt;/sup&amp;gt;&amp;lt;sub&amp;gt;https://www.oreilly.com/ideas/what-is-jupyter&amp;lt;/sub&amp;gt;&amp;lt;/sub&amp;gt;]

---

# Basic example 1: Visualizaing fio IOPs

 - Link to [notebook][basic-example-1-notebook]

 - Link to [nbviewer][basic-example-1-nbviewer]

---

# Basic example 2: Visualizaing iostat

 - Link to [notebook][basic-example-2-notebook]

 - Link to [nbviewer][basic-example-2-nbviewer]

---

# Real example: My results for OpenZFS #447

 - Link to [Max Rate Submit on HDDs][max-rate-submit-hdds]

 - Link to [Max Rate Submit on SSDs][max-rate-submit-ssds]

 - Link to [Fixed Rate Submit on HDDs][fixed-rate-submit-hdds]

 - Link to [Fixed Rate Submit on HDDs][fixed-rate-submit-hdds]

.footnote[&amp;lt;sub&amp;gt;&amp;lt;sup&amp;gt;\*&amp;lt;/sup&amp;gt;&amp;lt;sub&amp;gt;https://www.prakashsurya.com/post/2017-09-08-performance-testing-results-for-openzfs-447/&amp;lt;/sub&amp;gt;&amp;lt;/sub&amp;gt;]

---

# My Jupyter Tips

 - Use relavant Python libraries; e.g. Pandas, Matplotlib, etc.

 - Format output data to allow easier ingestion.

    - e.g. use `pandas.read_csv` rather than custom parsing.

 - Use `pandas.DataFrame`; makes data analysis and graphing easy:

    - `df.plot()` to plot data.

    - `df3 = df1 - df2` to determine the difference

 - `seaborn` library can help make graphs subjectively &amp;quot;prettier&amp;quot;.

    - As simple as `import seaborn` to change defaults

---

# How can YOU use Jupyter?

 - Official documentation: [Jupyter Notebook Quickstart](http://jupyter.readthedocs.io/en/latest/content-quickstart.html)

 - My notes: [Using Python and Jupyter for Performance Testing and Analysis](https://www.prakashsurya.com/post/2017-09-07-using-python-and-jupyter-for-performance-testing-and-analysis/)

 - The &amp;quot;`jupyter`&amp;quot; DCenter image is Ubuntu 17.04 with Jupyter pre-installed.

    - No LDAP; log in using `delphix` user and run `jupyter`

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;$ jupyter notebook &amp;ndash;ip=0.0.0.0&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;Copy/paste this URL into your browser when you connect for the first time,
to login with a token:
    http://0.0.0.0:8888/?token=431434aa3c192dd33613c4bff990e4207a3af5e402f48012
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;how-can-we-use-jupyter&#34;&gt;How can WE use Jupyter?&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;For notebooks that we don&amp;rsquo;t want publically accessible:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Create an internal Jupyter service; e.g. &lt;code&gt;jupyter.delphix.com&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create an internal nbviewer service; e.g. &lt;code&gt;nbviewer.delphix.com&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Taking this a step further: &lt;a href=&#34;https://medium.com/airbnb-engineering/scaling-knowledge-at-airbnb-875d73eff091&#34;&gt;Scaling Knowledge at Airbnb&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Teaching debugging techniques&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Sharing novel, intesting, and/or complicated RCA of bugs&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;Marketing&amp;rdquo; what one is working on to peers/organization&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Disseminating random, but useful, TIL stories&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Would require a cultural shift, to adopt Jupyter effectively.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Code Coverage for ZFS on Linux</title>
      <link>https://www.prakashsurya.com/post/2017-09-18-code-coverage-for-zfs-on-linux/</link>
      <pubDate>Mon, 18 Sep 2017 00:00:00 -0800</pubDate>
      
      <guid>https://www.prakashsurya.com/post/2017-09-18-code-coverage-for-zfs-on-linux/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been working with Brian Behlendorf on getting code coverage
information for the ZFS on Linux. The goal was to get code coverage data
for pull requests, as well as branches; this way, we can get a sense of
how well tested any given PR is by the automated tests, prior to landing
it. There&amp;rsquo;s still some wrinkles that need to be ironed out, but we&amp;rsquo;ve
mostly achieved that goal by leveraging &lt;a href=&#34;https://codecov.io/&#34;&gt;codecov.io&lt;/a&gt;, along
with a small &lt;a href=&#34;https://github.com/zfsonlinux/zfs-buildbot/blob/master/scripts/bb-test-cleanup.sh&#34;&gt;bash script&lt;/a&gt;. Here&amp;rsquo;s an &lt;a href=&#34;https://codecov.io/gh/zfsonlinux/zfs/pull/6566/diff&#34;&gt;example&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While what we&amp;rsquo;ve currently implemented is better than nothing, there&amp;rsquo;s
some potential improvements that&amp;rsquo;d I&amp;rsquo;d like to investigate when I have
time (and this post serves as a way to help me remember what they are):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Currently in the automated tests that are run for the ZFS on Linux
 project, the kernel&amp;rsquo;s code coverage data isn&amp;rsquo;t reset prior to
 running any tests. This is because in my testing, a hang would
 occur whenever I would write to the kernel&amp;rsquo;s &amp;ldquo;reset&amp;rdquo; file. For
 example, I would run this command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; # echo &#39;&#39; &amp;gt; /sys/kernel/debug/gcov/reset
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and it would never return; it would have the following backtrace:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# cat /proc/1624/stack
[&amp;lt;ffffffffb736f501&amp;gt;] __synchronize_srcu+0xe1/0x100
[&amp;lt;ffffffffb736f5eb&amp;gt;] synchronize_srcu+0xcb/0x1c0
[&amp;lt;ffffffffb7749390&amp;gt;] debugfs_remove+0xa0/0xe0
[&amp;lt;ffffffffb73e5f82&amp;gt;] release_node+0x62/0x140
[&amp;lt;ffffffffb73e613b&amp;gt;] reset_write+0xdb/0x120
[&amp;lt;ffffffffb774a3e4&amp;gt;] full_proxy_write+0x84/0xd0
[&amp;lt;ffffffffb758a90f&amp;gt;] __vfs_write+0x3f/0x230
[&amp;lt;ffffffffb758e38e&amp;gt;] vfs_write+0xfe/0x270
[&amp;lt;ffffffffb758e889&amp;gt;] SyS_write+0x79/0x130
[&amp;lt;ffffffffb7f8083b&amp;gt;] entry_SYSCALL_64_fastpath+0x1e/0xa9
[&amp;lt;ffffffffffffffff&amp;gt;] 0xffffffffffffffff
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unfortunately, I never got around to doing any root cause analysis
of the issue. Instead, we simply aren&amp;rsquo;t resetting the kernel&amp;rsquo;s
coverage data, which is fine because we only upload a single unified
report to Codecov (which contains the data for all tests in the
automated test suite).&lt;/p&gt;

&lt;p&gt;Also, it&amp;rsquo;s worth noting that while writing this post, I attempted
that same command to clear the kernel&amp;rsquo;s coverage data, and I was
unable to reproduce the hang. I&amp;rsquo;m running a different kernel now, so
perhaps the previous behavior was a bug in the kernel that&amp;rsquo;s been
fixed in a later release? Without an RCA, anything is possible.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We&amp;rsquo;re not collecting any data for the userspace libraries, such as
 &lt;code&gt;libzpool&lt;/code&gt;; which unfortunately means we don&amp;rsquo;t get much coverage
 data from runs of &lt;code&gt;ztest&lt;/code&gt; and &lt;code&gt;zloop&lt;/code&gt;. The reason behind this is
 simply due to the additional implementation complexity required to
 support the libraries:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Some of the libraries are composed of the same source files as
 the kernel modules. Thus, we&amp;rsquo;d need to be careful when
 generating the gcov reports if we included these libaries, such
 that the kernel report for a given source file isn&amp;rsquo;t replaced
 by the userspace report (or vice versa). If we happened to be
 careless, it&amp;rsquo;d be easy to generate the kernel report for a
 source file, and then accidentally overwrite that report with
 the userspace data when generating the userspace report.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The &lt;code&gt;.gcda&lt;/code&gt; files for the libraries often are found in a
 &lt;code&gt;.libs&lt;/code&gt; sub-directory, rather than directly in the same
 directory as the source code (like non-libary sources). For
 example, the &lt;code&gt;.gcda&lt;/code&gt; files for &lt;code&gt;libzpool&lt;/code&gt; are here:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $ find lib/libzpool -name &#39;*.gcda&#39; | head -n 5
 lib/libzpool/.libs/zfs_rlock.gcda
 lib/libzpool/.libs/zpool_prop.gcda
 lib/libzpool/.libs/vdev_raidz.gcda
 lib/libzpool/.libs/dsl_pool.gcda
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is in contrast to where these files are stored for the
 commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $ find cmd -name &#39;*.gcda&#39; | head -n 5
 cmd/zfs/zfs_iter.gcda
 cmd/zfs/zfs_main.gcda
 cmd/ztest/ztest.gcda
 cmd/mount_zfs/mount_zfs.gcda
 cmd/zpool/zpool_iter.gcda
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As a result, we have to use the &lt;code&gt;-o&lt;/code&gt; option when running &lt;code&gt;gcov&lt;/code&gt;
 for the libraries, but not for the commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $ cd ~/zfs/lib/libzpool
 $ gcov -o .libs arc.gcno
 File &#39;../../module/zfs/arc.c&#39;
 Lines executed:60.72% of 3055
 Creating &#39;arc.c.gcov&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The gcov data files reference their corresponding source files
 using relative paths to parts of the project&amp;rsquo;s repository. This
 happens when a library references one of the source files from
 the &lt;code&gt;module&lt;/code&gt; directory (i.e. when file is built both for kernel
 mode and user mode), and is a result of how the build system
 works for these libraries.&lt;/p&gt;

&lt;p&gt;Thus, if &lt;code&gt;gcov&lt;/code&gt; is run from the &amp;ldquo;root&amp;rdquo; of the project
 directory, it will be unable to find the source files for that
 library. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $ gcov -b lib/libzpool/arc.gcno
 ...
 Cannot open source file ../../module/zfs/arc.c
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This can be relatively easily worked around by first &lt;code&gt;cd&lt;/code&gt;-ing
 into the directory that contains the &lt;code&gt;.gcno&lt;/code&gt; file, and then
 running &lt;code&gt;gcov&lt;/code&gt;, but that idea falls apart for the &lt;code&gt;libicp&lt;/code&gt;
 library.&lt;/p&gt;

&lt;p&gt;For this libary, one must execute &lt;code&gt;gcov&lt;/code&gt; from the &lt;code&gt;lib/libicp&lt;/code&gt;
 directory, but the &lt;code&gt;.gcno&lt;/code&gt; files are stored in subdirectories
 from there. For example, this fails:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $ cd ~/zfs/lib/libicp/algs/sha2
 $ gcov -o .libs sha2.gcno
 File &#39;../../module/icp/algs/sha2/sha2.c&#39;
 Lines executed:67.41% of 135
 Creating &#39;sha2.c.gcov&#39;
 Cannot open source file ../../module/icp/algs/sha2/sha2.c
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But this works:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $ cd ~/zfs/lib/libicp
 $ gcov -o algs/sha2/.libs algs/sha2/sha2.gcno
 File &#39;../../module/icp/algs/sha2/sha2.c&#39;
 Lines executed:67.41% of 135
 Creating &#39;sha2.c.gcov&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The last complication to consider is that, since we can have
 two different modes of execution for any given source file
 (since we compile certain files in both kernel and user mode),
 it&amp;rsquo;d be ideal to have seperate coverage reports for kernel and
 user mode execution. Codecov appears to support this via its
 concept of &amp;ldquo;flags&amp;rdquo; (i.e. using the &lt;code&gt;-F&lt;/code&gt; option of their &lt;a href=&#34;https://docs.codecov.io/v4.3.6/docs/about-the-codecov-bash-uploader&#34;&gt;Bash
 uploader&lt;/a&gt;), but that functionality still needs to be
 evaluated to make sure it&amp;rsquo;ll work for our needs.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All in all, coming up with solutions for any (or all) of these
complications is possible, it just requires a little more work to be
done. For the first attempt at collecting coverage data, I opted to keep
the implementation simple yet functional and useful. I hope to revisit
these issues, and extend the coverage data to include the libraries
soon.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using &#34;gcov&#34; with ZFS on Linux Kernel Modules</title>
      <link>https://www.prakashsurya.com/post/2017-09-11-using-gcov-with-zfs-on-linux-kernel-modules/</link>
      <pubDate>Mon, 11 Sep 2017 00:00:00 -0800</pubDate>
      
      <guid>https://www.prakashsurya.com/post/2017-09-11-using-gcov-with-zfs-on-linux-kernel-modules/</guid>
      <description>

&lt;h2 id=&#34;building-a-gcov-enabled-linux-kernel&#34;&gt;Building a &amp;ldquo;gcov&amp;rdquo; Enabled Linux Kernel&lt;/h2&gt;

&lt;p&gt;In order to extract &amp;ldquo;gcov&amp;rdquo; data from the Linux kernel, and/or Linux
kernel modules, a &amp;ldquo;gcov&amp;rdquo; enabled Linux kernel is needed. Since my
current development environment is based on Ubuntu 17.04, and the fact
that Ubuntu doesn&amp;rsquo;t provide a pre-built kernel with &amp;ldquo;gcov&amp;rdquo; enabled, I
had to build the kernel from source. This was actually pretty simple,
and most of that process is already documented &lt;a href=&#34;https://kernelnewbies.org/KernelBuild&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;install-the-kernel-build-dependencies&#34;&gt;Install the Kernel Build Dependencies&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install libncurses5-dev \
      gcc make git exuberant-ctags bc libssl-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;obtaining-the-mainline-kernel-sources&#34;&gt;Obtaining the Mainline Kernel Sources&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/torvalds/linux.git ~/linux
$ cd ~/linux
$ git checkout v4.13
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;default-kernel-build-configuration&#34;&gt;Default Kernel Build Configuration&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ cp /boot/config-$(uname -r) .config
$ yes &#39;&#39; | make oldconfig
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;adding-gcov-specific-configurations&#34;&gt;Adding &amp;ldquo;gcov&amp;rdquo; Specific Configurations&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ echo &#39;CONFIG_DEBUG_FS=y&#39; &amp;gt;&amp;gt; .config
$ echo &#39;CONFIG_GCOV_KERNEL=y&#39; &amp;gt;&amp;gt; .config
$ echo &#39;CONFIG_GCOV_FORMAT_AUTODETECT=y&#39; &amp;gt;&amp;gt; .config
$ echo &#39;CONFIG_GCOV_PROFILE_ALL=y&#39; &amp;gt;&amp;gt; .config
$ yes &#39;&#39; | make oldconfig
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;building-and-installing-the-custom-kernel&#34;&gt;Building and Installing the Custom Kernel&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ make -j$(nproc)
$ sudo make modules_install install
$ sudo reboot
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;verifying-gcov-support-is-enabled&#34;&gt;Verifying &amp;ldquo;gcov&amp;rdquo; Support is Enabled&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ sudo mount -t debugfs none /sys/kernel/debug
$ sudo ls -1d /sys/kernel/debug/gcov
/sys/kernel/debug/gcov
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;building-zfs-on-linux-modules&#34;&gt;Building ZFS on Linux Modules&lt;/h2&gt;

&lt;p&gt;There&amp;rsquo;s nothing special that we need to do, in order to enable &amp;ldquo;gcov&amp;rdquo;
support for the ZFS on Linux modules. Since the kernel was built with
&amp;ldquo;gcov&amp;rdquo; enabled, the modules will be automatically built with it enabled
as well.&lt;/p&gt;

&lt;h3 id=&#34;building-the-spl-repository&#34;&gt;Building the SPL Repository&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ git clone git://github.com/zfsonlinux/spl.git ~/spl
$ cd ~/spl
$ ./autogen.sh &amp;amp;&amp;amp; ./configure &amp;amp;&amp;amp; make
$ sudo make install
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;building-the-zfs-repository&#34;&gt;Building the ZFS Repository&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ git clone git://github.com/zfsonlinux/zfs.git ~/zfs
$ cd ~/zfs
$ ./autogen.sh &amp;amp;&amp;amp; ./configure &amp;amp;&amp;amp; make
$ sudo make install
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;running-a-test-and-collecting-data-files&#34;&gt;Running a Test and Collecting Data Files&lt;/h2&gt;

&lt;p&gt;At this point, we&amp;rsquo;re running on a &amp;ldquo;gcov&amp;rdquo; enabled Linux kernel, and the
ZFS on Linux kernel modules should be installed such that we can load
them easily with &lt;code&gt;modprobe&lt;/code&gt;. Thus, we can finally run a trivial test,
loading and unloading the &amp;ldquo;zfs&amp;rdquo; module, and then use &lt;code&gt;gcov&lt;/code&gt; to
extract the code coverage information from that test.&lt;/p&gt;

&lt;h3 id=&#34;loading-and-unloading-the-zfs-module&#34;&gt;Loading and Unloading the &amp;ldquo;zfs&amp;rdquo; module&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ sudo modprobe zfs
$ sudo modprobe -r zfs
$ dmesg | grep ZFS
[ 1214.307936] ZFS: Loaded module v0.7.0-1, ZFS pool version 5000, ZFS filesystem version 5
[ 1216.475316] ZFS: Unloaded module v0.7.0-1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;collecting-gcov-data-files&#34;&gt;Collecting &amp;ldquo;gcov&amp;rdquo; Data Files&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ sudo chmod a+rx /sys/kernel/debug
$ TEMPDIR=$(mktemp -d)
$ cd /sys/kernel/debug/gcov/$HOME
$ find . -type d -exec mkdir -p $TEMPDIR/{} \;
$ find . -name &#39;*.gcda&#39; -exec sh -c &#39;sudo cat $0 &amp;gt; &#39;$TEMPDIR&#39;/$0&#39; {} \;
$ find . -name &#39;*.gcno&#39; -exec sh -c &#39;cp -d $0 &#39;$TEMPDIR&#39;/$0&#39; {} \;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;use-data-files-to-extract-code-coverage-information&#34;&gt;Use Data Files to Extract Code Coverage Information&lt;/h2&gt;

&lt;p&gt;Now that we have the &amp;ldquo;gcov&amp;rdquo; data files stored in &lt;code&gt;$TEMPDIR&lt;/code&gt;, we can
finally use these to extract the code converage data for any particular
source code file that we&amp;rsquo;re interested in. For this example, we&amp;rsquo;re going
to look at the &lt;code&gt;zfs_ioctl.c&lt;/code&gt; file, and more specifically, at the &lt;code&gt;_fini&lt;/code&gt;
function which is run a single time when the &amp;ldquo;zfs&amp;rdquo; module is unloaded:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /tmp
$ gcov -o $TEMPDIR/zfs/module/zfs zfs_ioctl.c
$ cat zfs_ioctl.c.gcov
...
        -: 6751:static void __exit
        1: 6752:_fini(void)
        -: 6753:{
        1: 6754:        zfs_detach();
        1: 6755:        zfs_fini();
        1: 6756:        spa_fini();
        1: 6757:        zvol_fini();
        -: 6758:
        1: 6759:        tsd_destroy(&amp;amp;zfs_fsyncer_key);
        1: 6760:        tsd_destroy(&amp;amp;rrw_tsd_key);
        1: 6761:        tsd_destroy(&amp;amp;zfs_allow_log_key);
        -: 6762:
        1: 6763:        printk(KERN_NOTICE &amp;quot;ZFS: Unloaded module v%s-%s%s\n&amp;quot;,
        -: 6764:            ZFS_META_VERSION, ZFS_META_RELEASE, ZFS_DEBUG_STR);
        1: 6765:}
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we can see that each line of the &lt;code&gt;_fini&lt;/code&gt; function was executed
exactly a single time, which is expected based on our trival load/unload
test case.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Performance Testing Results for OpenZFS #447</title>
      <link>https://www.prakashsurya.com/post/2017-09-08-performance-testing-results-for-openzfs-447/</link>
      <pubDate>Fri, 08 Sep 2017 00:00:00 -0800</pubDate>
      
      <guid>https://www.prakashsurya.com/post/2017-09-08-performance-testing-results-for-openzfs-447/</guid>
      <description>&lt;p&gt;The following are links to the Jupyter notebooks that describe the
performance testing that I did for &lt;a href=&#34;https://github.com/openzfs/openzfs/pull/447&#34;&gt;OpenZFS #447&lt;/a&gt;, and the results
of that testing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://nbviewer.jupyter.org/github/prakashsurya/prakashsurya.github.io/blob/src/static/post/2017-09-08-performance-testing-results-for-openzfs-447/openzfs-447-perf-max-rate-submit-hdd.ipynb
&#34;&gt;Max Rate Submit on HDDs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nbviewer.jupyter.org/github/prakashsurya/prakashsurya.github.io/blob/src/static/post/2017-09-08-performance-testing-results-for-openzfs-447/openzfs-447-perf-max-rate-submit-ssd.ipynb
&#34;&gt;Max Rate Submit on SSDs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nbviewer.jupyter.org/github/prakashsurya/prakashsurya.github.io/blob/src/static/post/2017-09-08-performance-testing-results-for-openzfs-447/openzfs-447-perf-fixed-rate-submit-hdd.ipynb
&#34;&gt;Fixed Rate Submit on HDDs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nbviewer.jupyter.org/github/prakashsurya/prakashsurya.github.io/blob/src/static/post/2017-09-08-performance-testing-results-for-openzfs-447/openzfs-447-perf-fixed-rate-submit-ssd.ipynb
&#34;&gt;Fixed Rate Submit on SSDs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additionally, a compressed tarball with all the raw data used to
generate those Jupyter notebooks can be found &lt;a href=&#34;openzfs-447-perf.tar.xz&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Python and Jupyter for Performance Testing and Analysis</title>
      <link>https://www.prakashsurya.com/post/2017-09-07-using-python-and-jupyter-for-performance-testing-and-analysis/</link>
      <pubDate>Thu, 07 Sep 2017 00:00:00 -0800</pubDate>
      
      <guid>https://www.prakashsurya.com/post/2017-09-07-using-python-and-jupyter-for-performance-testing-and-analysis/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;I recently worked on some changes to the OpenZFS ZIL (see &lt;a href=&#34;https://github.com/openzfs/openzfs/pull/447&#34;&gt;here&lt;/a&gt;),
and in the context of working on that project, I discovered some new
tools that helped me run my performance tests and analyze their
results. What follows is some notes on the tools that I used, and how I
used them.&lt;/p&gt;

&lt;h2 id=&#34;quick-overview&#34;&gt;Quick Overview&lt;/h2&gt;

&lt;p&gt;Before I dive into the details of how I used these tools, I wanted to
quickly go over what the tools were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/axboe/fio&#34;&gt;fio&lt;/a&gt; was used to generate the workload, and provide statistics
about the performance from the application&amp;rsquo;s perspective.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://jupyter.org/&#34;&gt;Jupyter&lt;/a&gt; was used for analysis of the test results; e.g.
performing data manipulations, generating visualizations, and
presenting the data/visualizations along with text explanations in
a unified document.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.python.org/&#34;&gt;Python&lt;/a&gt; was used for everything; e.g. running the tests,
capturing the results, analysis of the data, and generating
visualizations were all driven by python scripts. In addition to the
core language, the following modules were used:
&lt;a href=&#34;https://amoffat.github.io/sh/&#34;&gt;sh&lt;/a&gt;,
&lt;a href=&#34;http://pandas.pydata.org/&#34;&gt;pandas&lt;/a&gt;,
&lt;a href=&#34;http://www.numpy.org/&#34;&gt;numpy&lt;/a&gt;,
&lt;a href=&#34;https://seaborn.pydata.org/&#34;&gt;seaborn&lt;/a&gt;,
and &lt;a href=&#34;https://matplotlib.org/&#34;&gt;matplotlib&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/pyenv/pyenv&#34;&gt;pyenv&lt;/a&gt; and &lt;a href=&#34;https://github.com/pyenv/pyenv-virtualenv&#34;&gt;pyenv-virtualenv&lt;/a&gt; were used to
provide an isolated Python environment.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; and &lt;a href=&#34;https://nbviewer.jupyter.org/&#34;&gt;nbviewer&lt;/a&gt; were used to share the
Jupyter notebooks, which contained the results of the tests.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;install-prerequisites-on-ubuntu-16-04&#34;&gt;Install Prerequisites on Ubuntu 16.04&lt;/h2&gt;

&lt;p&gt;Before we can use the above referenced tools, we first must download,
build, and/or install them such that they are available for us to use.
Below is some instructions for how to do that on an Ubuntu 16.04 VM that
I used; if using another operating system, the specific commands may not
work, but hopefully what&amp;rsquo;s included here can be easily adapted.&lt;/p&gt;

&lt;h3 id=&#34;install-build-dependencies&#34;&gt;Install Build Dependencies&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt install -y git build-essential zlib1g-dev \
    libbz2-dev libssl-dev libreadline-dev libsqlite3-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;install-pyenv-and-pyenv-virtualenv&#34;&gt;Install &amp;ldquo;pyenv&amp;rdquo; and &amp;ldquo;pyenv virtualenv&amp;rdquo;&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/pyenv/pyenv ~/.pyenv
$ git clone https://github.com/pyenv/pyenv-virtualenv.git \
    ~/.pyenv/plugins/pyenv-virtualenv

$ echo &#39;export PYENV_ROOT=&amp;quot;$HOME/.pyenv&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bash_profile
$ echo &#39;export PATH=&amp;quot;$PYENV_ROOT/bin:$PATH&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bash_profile
$ echo &#39;eval &amp;quot;$(pyenv init -)&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bash_profile
$ echo &#39;eval &amp;quot;$(pyenv virtualenv-init -)&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;install-python-3-and-create-virtual-environment&#34;&gt;Install Python 3 and Create Virtual Environment&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ pyenv install 3.6.2
$ pyenv virtualenv
$ pyenv virtualenv 3.6.2 jupyter-example
$ mkdir ~/jupyter-example
$ cd ~/jupyter-example
$ echo jupyter-example &amp;gt; .python-version
$ pip install jupyter pandas numpy seaborn matplotlib sh
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;build-and-install-fio&#34;&gt;Build and Install &amp;ldquo;fio&amp;rdquo;&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/axboe/fio ~/fio
$ cd ~/fio
$ make
$ sudo make install
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;install-additional-utilities&#34;&gt;Install Additional Utilities&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt install -y zfsutils-linux jq sysstat
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;generate-results-data-required-for-analysis&#34;&gt;Generate Results Data Required for Analysis&lt;/h2&gt;

&lt;p&gt;Now that all of the necessary tools have been installed, we can write a
Python script that uses these tools to run the tests and collect any
data that will be needed for proper analysis.&lt;/p&gt;

&lt;h3 id=&#34;generate-fio-test-configuration&#34;&gt;Generate &amp;ldquo;fio&amp;rdquo; Test Configuration&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;ll be using &amp;ldquo;fio&amp;rdquo; to generate the workload. Let&amp;rsquo;s first create the
configuration file that will be passed to fio, which tells it how to
behave:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat &amp;gt; ~/jupyter-example/workload.fio &amp;lt;&amp;lt;EOF
[global]
group_reporting
clocksource=cpu
ioengine=psync
fallocate=none
rw=write
blocksize=8k
time_based
iodepth=1
thread=0
direct=0
sync=1

[workload]
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;generate-python-script-to-run-fio-tests&#34;&gt;Generate Python Script to Run &amp;ldquo;fio&amp;rdquo; Tests&lt;/h3&gt;

&lt;p&gt;Now we&amp;rsquo;ll create the python script that will be used to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;create a ZFS pool and dataset from a known set of disks&lt;/li&gt;
&lt;li&gt;run &amp;ldquo;fio&amp;rdquo;, such that it uses the ZFS dataset previously created&lt;/li&gt;
&lt;li&gt;run &amp;ldquo;iostat&amp;rdquo;, collecting disk metrics concurrently while &amp;ldquo;fio&amp;rdquo; runs&lt;/li&gt;
&lt;li&gt;copy the data generated from &amp;ldquo;fio&amp;rdquo; and &amp;ldquo;iostat&amp;rdquo; to a &amp;ldquo;results&amp;rdquo;
 directory so they can be analyzed at a later time&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here&amp;rsquo;s what the script may look like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat &amp;gt; ~/jupyter-example/workload.py &amp;lt;&amp;lt;EOF
#!/usr/bin/env python3

import sh
import tempfile

def fio(directory, numjobs, disks, runtime=60):
  with tempfile.TemporaryDirectory(dir=&#39;/var/tmp&#39;) as tempdir:
    procs = []

    for d in disks:
      iostat = sh.iostat(&#39;-dxy&#39;, d, &#39;1&#39;,
                         _piped=True, _bg=True, _bg_exc=False)
      procs.append(iostat)

      grep = sh.grep(iostat, d, _bg=True, _bg_exc=False,
                     _out=&#39;{:s}/iostat-{:s}.txt&#39;.format(tempdir, d))
      procs.append(grep)

    sh.sudo.fio(&#39;--directory={:s}&#39;.format(directory),
                &#39;--size={:.0f}M&#39;.format(2**20 / numjobs),
                &#39;--numjobs={:d}&#39;.format(numjobs),
                &#39;--runtime={:d}&#39;.format(runtime),
                &#39;--output={:s}/{:s}&#39;.format(tempdir, &#39;fio.json&#39;),
                &#39;--output-format=json+&#39;,
                &#39;./workload.fio&#39;)

    for p in procs:
      try:
        sh.sudo.kill(p.pid)
        p.wait
      except (sh.ErrorReturnCode_1, sh.SignalException_SIGTERM):
        pass

    directory = &#39;results/{:d}-disks/{:d}-jobs&#39;.format(len(disks), numjobs)
    sh.mkdir(&#39;-p&#39;, directory)
    sh.rm(&#39;-rf&#39;, directory)
    sh.cp(&#39;-r&#39;, tempdir, directory)
    sh.chmod(&#39;755&#39;, directory)

def test(disks):
  for numjobs in [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]:
    try:
      sh.sudo.zpool(&#39;create&#39;, &#39;-f&#39;, &#39;tank&#39;, disks)
      sh.sudo.zfs(&#39;create&#39;, &#39;-o&#39;, &#39;recsize=8k&#39;, &#39;tank/dozer&#39;)
      fio(&#39;/tank/dozer&#39;, numjobs, disks)
    finally:
      sh.sudo.zpool(&#39;destroy&#39;, &#39;tank&#39;)

def main():
  sh.rm(&#39;-rf&#39;, &#39;results&#39;)
  sh.mkdir(&#39;results&#39;)

  test([&#39;sdb&#39;])
  test([&#39;sdb&#39;, &#39;sdc&#39;])
  test([&#39;sdb&#39;, &#39;sdc&#39;, &#39;sdd&#39;])

if __name__ == &#39;__main__&#39;:
  main()
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;run-python-script-to-generate-results&#34;&gt;Run Python Script to Generate Results&lt;/h3&gt;

&lt;p&gt;The python script created in the previous section can then be run, which
will generate a &amp;ldquo;results&amp;rdquo; directory with all of the raw data from &amp;ldquo;fio&amp;rdquo;
and &amp;ldquo;iostat&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(jupyter-example) $ time python3 workload.py

real    34m55.771s
user    2m19.040s
sys     12m20.656s

(jupyter-example) $ ls results/*
results/1-disks:
1024-jobs  128-jobs  16-jobs  1-jobs  256-jobs  2-jobs  32-jobs  4-jobs  512-jobs  64-jobs  8-jobs

results/2-disks:
1024-jobs  128-jobs  16-jobs  1-jobs  256-jobs  2-jobs  32-jobs  4-jobs  512-jobs  64-jobs  8-jobs

results/3-disks:
1024-jobs  128-jobs  16-jobs  1-jobs  256-jobs  2-jobs  32-jobs  4-jobs  512-jobs  64-jobs  8-jobs

(jupyter-example) $ ls results/*-disks/1024-jobs
results/1-disks/1024-jobs:
fio.json  iostat-sdb.txt

results/2-disks/1024-jobs:
fio.json  iostat-sdb.txt  iostat-sdc.txt

results/3-disks/1024-jobs:
fio.json  iostat-sdb.txt  iostat-sdc.txt  iostat-sdd.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As one can see, each unique test configuration (i.e. number of disks in
the zpool, and number of &amp;ldquo;fio&amp;rdquo; threads) has its own directory containing
the results for that specific test configuration. The &amp;ldquo;fio.json&amp;rdquo;
contains the JSON formatted output from &amp;ldquo;fio&amp;rdquo;, and the &amp;ldquo;iostat-*.txt&amp;rdquo;
files contains the output from &amp;ldquo;iostat&amp;rdquo; for each specific disk.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a quick inspection of one of the &amp;ldquo;fio&amp;rdquo; files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(jupyter-example) $ head results/2-disks/32-jobs/fio.json
{
  &amp;quot;fio version&amp;quot; : &amp;quot;fio-3.0-48-g83a9&amp;quot;,
  &amp;quot;timestamp&amp;quot; : 1504768846,
  &amp;quot;timestamp_ms&amp;quot; : 1504768846239,
  &amp;quot;time&amp;quot; : &amp;quot;Thu Sep  7 07:20:46 2017&amp;quot;,
  &amp;quot;global options&amp;quot; : {
    &amp;quot;directory&amp;quot; : &amp;quot;/tank/dozer&amp;quot;,
    &amp;quot;size&amp;quot; : &amp;quot;32768M&amp;quot;,
    &amp;quot;runtime&amp;quot; : &amp;quot;60&amp;quot;,
    &amp;quot;clocksource&amp;quot; : &amp;quot;cpu&amp;quot;,

(jupyter-example) $ jq -Mr .jobs[0].write.lat_ns results/2-disks/32-jobs/fio.json
{
  &amp;quot;min&amp;quot;: 712505,
  &amp;quot;max&amp;quot;: 312646560,
  &amp;quot;mean&amp;quot;: 5412690.837107,
  &amp;quot;stddev&amp;quot;: 7953187.998254
}

(jupyter-example) $ jq -Mr .jobs[0].write.iops results/2-disks/32-jobs/fio.json
5906.296339
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From this, we can see that on average, each write made by fio took
roughly 5ms to complete. Additionally, fio averaged about 5.9K IOPs
during that specific test&amp;rsquo;s runtime.&lt;/p&gt;

&lt;p&gt;Similarly, we can briefly look at the iostat data collected for that
same test configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(jupyter-example) $ head results/2-disks/32-jobs/iostat-sdb.txt
sdb               0.00     0.00    0.00  304.00     0.00 18116.50   119.19     0.54    1.78    0.00    1.78   1.45  44.00
sdb               0.00     0.00    0.00  667.00     0.00 60725.50   182.09     1.23    1.84    0.00    1.84   1.27  84.40
sdb               0.00     0.00    0.00  500.00     0.00 49707.50   198.83     0.92    1.86    0.00    1.86   1.58  78.80
sdb               0.00     0.00    0.00  502.00     0.00 45371.00   180.76     0.91    1.80    0.00    1.80   1.50  75.20
sdb               0.00     0.00    0.00  523.00     0.00 47920.50   183.25     1.07    2.06    0.00    2.06   1.48  77.20
sdb               0.00     0.00    0.00  598.00     0.00 58390.50   195.29     1.38    2.29    0.00    2.29   1.55  92.80
sdb               0.00     0.00    0.00  393.00     0.00 37456.00   190.62     0.98    2.49    0.00    2.49   2.06  80.80
sdb               0.00     0.00    0.00  527.00     0.00 48050.00   182.35     1.08    2.05    0.00    2.05   1.53  80.40
sdb               0.00     0.00    0.00  590.00     0.00 55418.00   187.86     1.24    2.10    0.00    2.10   1.48  87.60
sdb               0.00     0.00    0.00  663.00     0.00 64226.50   193.75     1.18    1.78    0.00    1.78   1.32  87.20

(jupyter-example) $ head results/2-disks/32-jobs/iostat-sdc.txt
sdc               0.00     0.00    0.00  295.00     0.00 25714.00   174.33     0.50    1.69    0.00    1.69   1.40  41.20
sdc               0.00     0.00    0.00  640.00     0.00 59921.00   187.25     1.22    1.90    0.00    1.90   1.33  85.20
sdc               0.00     0.00    0.00  509.00     0.00 53581.50   210.54     1.00    1.96    0.00    1.96   1.70  86.40
sdc               0.00     0.00    0.00  512.00     0.00 41799.00   163.28     0.95    1.85    0.00    1.85   1.48  75.60
sdc               0.00     0.00    0.00  538.00     0.00 48975.50   182.07     1.09    2.03    0.00    2.03   1.50  80.80
sdc               0.00     0.00    0.00  601.00     0.00 50568.00   168.28     1.36    2.25    0.00    2.25   1.50  90.40
sdc               0.00     0.00    0.00  395.00     0.00 38467.00   194.77     1.03    2.61    0.00    2.61   2.14  84.40
sdc               0.00     0.00    0.00  540.00     0.00 49031.00   181.60     1.03    1.91    0.00    1.91   1.45  78.40
sdc               0.00     0.00    0.00  580.00     0.00 53762.50   185.39     1.28    2.21    0.00    2.21   1.49  86.40
sdc               0.00     0.00    0.00  648.00     0.00 57146.50   176.38     1.19    1.83    0.00    1.83   1.31  85.20
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These files contain the output of &amp;ldquo;iostat -dxy&amp;rdquo; for each device in the
ZFS pool used for the specific test configuration. In this case, the
pool consisted of 2 disks, &amp;ldquo;sdb&amp;rdquo; and &amp;ldquo;sdc&amp;rdquo;. Each line in the file
represents a 1 second interval.&lt;/p&gt;

&lt;p&gt;For completeness, since the iostat column headers are not included in
these files, here&amp;rsquo;s what they are:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thus, we can see that usually an IO request sent to these disks was
serviced in less than 2ms, judging by the &lt;code&gt;svctm&lt;/code&gt; column.&lt;/p&gt;

&lt;h2 id=&#34;analyzing-results-data-with-pandas-and-jupyter&#34;&gt;Analyzing Results Data with Pandas and Jupyter&lt;/h2&gt;

&lt;p&gt;Now that the data had been gathered from &amp;ldquo;fio&amp;rdquo; and &amp;ldquo;iostat&amp;rdquo; for all of
the test configurations, it was time to parse and analyze the data.&lt;/p&gt;

&lt;h3 id=&#34;parsing-fio-results-with-pandas&#34;&gt;Parsing &amp;ldquo;fio&amp;rdquo; Results with Pandas&lt;/h3&gt;

&lt;p&gt;To parse the &amp;ldquo;fio&amp;rdquo; results files, I used a combination of the previously
used &amp;ldquo;sh&amp;rdquo; Python module, and the &amp;ldquo;jq&amp;rdquo; command. Here&amp;rsquo;s some code that
would parse the the IOPs reported by fio for each test configuration,
and print the results as a table:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(jupyter-example) $ python3
Python 3.6.2 (default, Sep  6 2017, 21:23:54)
[GCC 5.4.0 20160609] on linux
Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.
&amp;gt;&amp;gt;&amp;gt; import pandas
&amp;gt;&amp;gt;&amp;gt; import sh
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; numjobs = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]
&amp;gt;&amp;gt;&amp;gt; numdisks = [1, 2, 3]
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; jq = sh.jq.bake(&#39;-M&#39;, &#39;-r&#39;)
&amp;gt;&amp;gt;&amp;gt; iops = pandas.DataFrame()
&amp;gt;&amp;gt;&amp;gt; for i in numdisks:
...   tmp = []
...   for j in numjobs:
...     data = jq(&#39;.jobs[0].write.iops&#39;,
...               &#39;results/{:d}-disks/{:d}-jobs/fio.json&#39;.format(i, j))
...     tmp.append(float(data.strip()))
...   iops[&#39;{:d} disks&#39;.format(i)] = pandas.Series(tmp, numjobs)
...
&amp;gt;&amp;gt;&amp;gt; print(iops)
          1 disks       2 disks       3 disks
1      693.355111    539.923004    399.353355
2      946.218459    817.014473    465.543389
4     1487.733742   1367.766810    817.556196
8     2597.526832   2714.935671    902.661356
16    3958.774225   4132.298054   3854.193054
32    6192.515329   5906.296339   5730.420583
64    7470.722522   8216.463923   8146.322770
128   8649.000333   9370.233395   9525.552187
256   8601.175804  10942.662150  10868.330780
512   7327.968610  11595.399661  11321.241803
1024  7792.668597  11137.351190  11391.167610
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Similarly, here&amp;rsquo;s code that would report the average write latency (in
nanoseconds) reported by fio for each test configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(jupyter-example) $ python3
Python 3.6.2 (default, Sep  6 2017, 21:23:54)
[GCC 5.4.0 20160609] on linux
Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.
&amp;gt;&amp;gt;&amp;gt; import pandas
&amp;gt;&amp;gt;&amp;gt; import sh
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; numjobs = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]
&amp;gt;&amp;gt;&amp;gt; numdisks = [1, 2, 3]
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; jq = sh.jq.bake(&#39;-M&#39;, &#39;-r&#39;)
&amp;gt;&amp;gt;&amp;gt; lat = pandas.DataFrame()
&amp;gt;&amp;gt;&amp;gt; for i in numdisks:
...   tmp = []
...   for j in numjobs:
...     data = jq(&#39;.jobs[0].write.lat_ns.mean&#39;,
...               &#39;results/{:d}-disks/{:d}-jobs/fio.json&#39;.format(i, j))
...     tmp.append(float(data.strip()))
...   lat[&#39;{:d} disks&#39;.format(i)] = pandas.Series(tmp, numjobs)
...
&amp;gt;&amp;gt;&amp;gt; print(lat)
           1 disks       2 disks       3 disks
1     1.438905e+06  1.848592e+06  2.500436e+06
2     2.110580e+06  2.444135e+06  4.292531e+06
4     2.685592e+06  2.919950e+06  4.889253e+06
8     3.076803e+06  2.943452e+06  8.858595e+06
16    4.038235e+06  3.868267e+06  4.148222e+06
32    5.163324e+06  5.412691e+06  5.580323e+06
64    8.561707e+06  7.783084e+06  7.850346e+06
128   1.478921e+07  1.364914e+07  1.342665e+07
256   2.973660e+07  2.333695e+07  2.352923e+07
512   6.972930e+07  4.406545e+07  4.511673e+07
1024  1.305812e+08  9.137294e+07  8.931305e+07
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;visualizing-fio-results-with-jupyter&#34;&gt;Visualizing &amp;ldquo;fio&amp;rdquo; Results with Jupyter&lt;/h3&gt;

&lt;p&gt;While the text-based tables shown in the previous section are better
than nothing, Jupyter can be used to execute this parsing code, and
visualize the data using Python&amp;rsquo;s &amp;ldquo;matplotlib&amp;rdquo; graphing module.&lt;/p&gt;

&lt;p&gt;The Jupyter notebook software is easy to start up:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(jupyter-example) $ jupyter notebook --ip=0.0.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then one can navigate to the server running the notebook using a web
browser; e.g. I would enter &lt;code&gt;http://ps-jupyter.dcenter.delphix.com:8888&lt;/code&gt;
into my browser.&lt;/p&gt;

&lt;p&gt;If the &lt;code&gt;jupyter&lt;/code&gt; command is run from a local shell (e.g. on one&amp;rsquo;s
workstation), the &lt;code&gt;--ip&lt;/code&gt; option can be ommitted, and the command will
automatically attempt to open a new browser window with the notebook&amp;rsquo;s
URL already populated.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an &lt;a href=&#34;https://nbviewer.jupyter.org/github/prakashsurya/prakashsurya.github.io/blob/src/static/post/2017-09-07-using-python-and-jupyter-for-performance-testing-and-analysis/visualizing-fio-results-with-jupyter.ipynb
&#34;&gt;example&lt;/a&gt; Jupyter notebook, migrating the parsing
code from the prior section into the notebook, and adding some more logic
to generate graphs rather than text-based tables.&lt;/p&gt;

&lt;h3 id=&#34;visualizing-iostat-results-with-jupyter&#34;&gt;Visualizing &amp;ldquo;iostat&amp;rdquo; Results with Jupyter&lt;/h3&gt;

&lt;p&gt;Similarly, the data from &amp;ldquo;iostat&amp;rdquo; can also be parsed and visualized just
like the &amp;ldquo;fio&amp;rdquo; data. Rather than repeat the explanations from the prior
sections, I&amp;rsquo;ll simply link directly to the &lt;a href=&#34;https://nbviewer.jupyter.org/github/prakashsurya/prakashsurya.github.io/blob/src/static/post/2017-09-07-using-python-and-jupyter-for-performance-testing-and-analysis/visualizing-iostat-results-with-jupyter.ipynb
&#34;&gt;example&lt;/a&gt;
Jupyter notebook; which contains the code for both parsing the &amp;ldquo;iostat&amp;rdquo;
data files, as well as generating graphs from that data.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building and Using &#34;crash&#34; on Ubuntu 16.04</title>
      <link>https://www.prakashsurya.com/post/2017-09-05-building-and-using-crash-on-ubuntu-16-04/</link>
      <pubDate>Tue, 05 Sep 2017 00:00:00 -0800</pubDate>
      
      <guid>https://www.prakashsurya.com/post/2017-09-05-building-and-using-crash-on-ubuntu-16-04/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve been working on the ZFS on Linux project recently, and had a need
to use &lt;code&gt;crash&lt;/code&gt; on the Ubuntu 16.04 based VM I was using. The following
is some notes regarding the steps I had to take, in order to build,
install, and ultimately run the utility against the &amp;ldquo;live&amp;rdquo; system.&lt;/p&gt;

&lt;h2 id=&#34;build-and-install-crash&#34;&gt;Build and Install &amp;ldquo;crash&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;First, I had to install the build dependencies:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install -y \
    git build-essential libncurses5-dev zlib1g-dev bison
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I could checkout the source code, build, and install:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/crash-utility/crash
$ cd crash
$ make
$ sudo make install
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;install-kernel-debug-symbols&#34;&gt;Install Kernel Debug Symbols&lt;/h2&gt;

&lt;p&gt;In order to run the &lt;code&gt;crash&lt;/code&gt; utility against the live system, we need
access to the uncompressed kernel image. We can obtain this by
installing the corresponding &lt;code&gt;-dbgsym&lt;/code&gt; package for the running kernel.&lt;/p&gt;

&lt;p&gt;First, we have to enable the APT repositories that contain these
packages:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo tee /etc/apt/sources.list.d/ddebs.list &amp;lt;&amp;lt;EOF
deb http://ddebs.ubuntu.com/ $(lsb_release -c -s)          main restricted universe multiverse
deb http://ddebs.ubuntu.com/ $(lsb_release -c -s)-updates  main restricted universe multiverse
deb http://ddebs.ubuntu.com/ $(lsb_release -c -s)-proposed main restricted universe multiverse
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then add the correct key for these repositories:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-key adv \
    --keyserver keyserver.ubuntu.com \
    --recv-keys 428D7C01 C8CAB6595FDFF622
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now we can refresh the APT cache and install the kernel&amp;rsquo;s &lt;code&gt;-dbgsym&lt;/code&gt;
package:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get update -y
$ sudo apt-get install -y linux-image-$(uname -r)-dbgsym
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;run-crash-against-live-system&#34;&gt;Run &amp;ldquo;crash&amp;rdquo; Against Live System&lt;/h2&gt;

&lt;p&gt;Finally, with all of the above done, I could run the &lt;code&gt;crash&lt;/code&gt; utility
against the running system like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo crash /usr/lib/debug/boot/vmlinux-$(uname -r)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;rsquo;s a quick example for dumping the kernel backtrace for a specific
process (the process I needed to debug):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;crash&amp;gt; bt 28365
PID: 28365  TASK: ffff887b7b978e00  CPU: 5   COMMAND: &amp;quot;fio&amp;quot;
 #0 [ffff887cd2167870] __schedule at ffffffff8183e9ee
 #1 [ffff887cd21678c0] schedule at ffffffff8183f0d5
 #2 [ffff887cd21678d8] spl_panic at ffffffffc02d70ca [spl]
 #3 [ffff887cd2167a60] zil_commit at ffffffffc1271daa [zfs]
 #4 [ffff887cd2167b50] zfs_write at ffffffffc1260d6d [zfs]
 #5 [ffff887cd2167d48] zpl_write_common_iovec at ffffffffc128b391 [zfs]
 #6 [ffff887cd2167dc0] zpl_iter_write at ffffffffc128b4e1 [zfs]
 #7 [ffff887cd2167e30] new_sync_write at ffffffff8120ec0b
 #8 [ffff887cd2167eb8] __vfs_write at ffffffff8120ec76
 #9 [ffff887cd2167ec8] vfs_write at ffffffff8120f5f9
#10 [ffff887cd2167f08] sys_pwrite64 at ffffffff81210465
#11 [ffff887cd2167f50] entry_SYSCALL_64_fastpath at ffffffff818431f2
    RIP: 00007f08274fbda3  RSP: 00007ffc1eae8a70  RFLAGS: 00000293
    RAX: ffffffffffffffda  RBX: 00007f080f6d8240  RCX: 00007f08274fbda3
    RDX: 0000000000002000  RSI: 0000000000f9b660  RDI: 0000000000000004
    RBP: 00007f080f6d8240   R8: 0000000000000000   R9: 0000000000000001
    R10: 0000000000374000  R11: 0000000000000293  R12: 000000000009bea3
    R13: 0000000000000001  R14: 0000000000002000  R15: 0000000000372000
    ORIG_RAX: 0000000000000012  CS: 0033  SS: 002b
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And another example showing information about the running system:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;crash&amp;gt; sys
      KERNEL: /usr/lib/debug/boot/vmlinux-4.4.0-93-generic
    DUMPFILE: /proc/kcore
        CPUS: 32
        DATE: Tue Sep  5 22:55:59 2017
      UPTIME: 06:58:42
LOAD AVERAGE: 512.32, 512.25, 512.26
       TASKS: 1035
    NODENAME: ubuntu-16-04
     RELEASE: 4.4.0-93-generic
     VERSION: #116-Ubuntu SMP Fri Aug 11 21:17:51 UTC 2017
     MACHINE: x86_64  (2199 Mhz)
      MEMORY: 512 GB
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Using BCC&#39;s &#34;trace&#34; Instead of &#34;printk&#34;</title>
      <link>https://www.prakashsurya.com/post/2017-08-28-using-bccs-trace-instead-of-printk/</link>
      <pubDate>Mon, 28 Aug 2017 00:00:00 -0800</pubDate>
      
      <guid>https://www.prakashsurya.com/post/2017-08-28-using-bccs-trace-instead-of-printk/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Recently I&amp;rsquo;ve been working on porting some changes that I made to the
OpenZFS ZIL over to the ZFS on Linux codebase; see &lt;a href=&#34;https://github.com/openzfs/openzfs/pull/447&#34;&gt;here&lt;/a&gt;
for the OpenZFS pull request, and &lt;a href=&#34;https://github.com/zfsonlinux/zfs/pull/6566&#34;&gt;here&lt;/a&gt; for the ZFS on
Linux pull request.&lt;/p&gt;

&lt;p&gt;In my initial port, I was running into a problem where the automated
tests would trigger a &amp;ldquo;hang&amp;rdquo; as a result of the &lt;code&gt;readmmap&lt;/code&gt; program
calling &lt;code&gt;msync&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pstree -p 2337
test-runner.py(2337)-+-sudo(3183)---mmap_read_001_p(3185)---readmmap(3198)
                     `-{test-runner.py}(3184)

$ sudo cat /proc/3198/stack
[&amp;lt;ffffffff9bdafb68&amp;gt;] wait_on_page_bit_common+0x118/0x1d0
[&amp;lt;ffffffff9bdafd34&amp;gt;] __filemap_fdatawait_range+0x114/0x190
[&amp;lt;ffffffff9bdafdc4&amp;gt;] filemap_fdatawait_range+0x14/0x30
[&amp;lt;ffffffff9bdb2477&amp;gt;] filemap_write_and_wait_range+0x57/0x90
[&amp;lt;ffffffffc08f049d&amp;gt;] zpl_fsync+0x3d/0x110 [zfs]
[&amp;lt;ffffffff9be7b93b&amp;gt;] vfs_fsync_range+0x4b/0xb0
[&amp;lt;ffffffff9bdf6af2&amp;gt;] SyS_msync+0x182/0x200
[&amp;lt;ffffffff9c4d453b&amp;gt;] entry_SYSCALL_64_fastpath+0x1e/0xad
[&amp;lt;ffffffffffffffff&amp;gt;] 0xffffffffffffffff
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once this state was reached, the &lt;code&gt;msync&lt;/code&gt; call would never return.&lt;/p&gt;

&lt;p&gt;Without diving too far into the technical details, my hunch was that
the &lt;code&gt;zfs_putpage_commit_cb&lt;/code&gt; function was not being called properly. At
this point, I wanted to verify this, so I could then revisit the code
with concrete data to support my suspicision.&lt;/p&gt;

&lt;p&gt;If I hit this issue on illumos, I would have quickly jumped to using
either &lt;code&gt;dtrace&lt;/code&gt; or &lt;code&gt;mdb&lt;/code&gt; to help verify and debug the situation. Since
I was on Linux, I had neither of these tools at my disposal. Thankfully
though, I did have a test case that would reliably reproduce
the issue in a matter of minutes.&lt;/p&gt;

&lt;p&gt;I thought about adding some &lt;code&gt;printk&lt;/code&gt; or &lt;code&gt;zfs_dbgmsg&lt;/code&gt; statments to the
code and re-compiling to gather some data, but after having used
&lt;code&gt;dtrace&lt;/code&gt; on illumos, I resented that idea. I had previously read about
&lt;a href=&#34;http://www.brendangregg.com/blog/2016-03-05/linux-bpf-superpowers.html&#34;&gt;Linux BPF&lt;/a&gt; and &lt;a href=&#34;https://github.com/iovisor/bcc&#34;&gt;Linux BCC&lt;/a&gt;, so this felt like a
good opportunity try and experiment with those to see if I could use it
to gain better insight into my problem, without making any code changes.&lt;/p&gt;

&lt;h2 id=&#34;building-and-installing-bcc-from-source&#34;&gt;Building and Installing BCC from Source&lt;/h2&gt;

&lt;p&gt;First off, I wanted to build and install BCC from source, rather than
use a pre-built package. This decision was strictly for educational
purposes; I wanted to learn how easy or difficult this would be, in case
I ever wanted to make modifications to it in the future.&lt;/p&gt;

&lt;p&gt;The project contains easy to follow instructions for doing this in its
&lt;a href=&#34;https://github.com/iovisor/bcc/blob/master/INSTALL.md&#34;&gt;Install.md&lt;/a&gt; document. Since I was running on Ubuntu 17.04,
the process was documented and works as described:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Trusty and older
VER=trusty
$ echo &amp;quot;deb http://llvm.org/apt/$VER/ llvm-toolchain-$VER-3.7 main
$ deb-src http://llvm.org/apt/$VER/ llvm-toolchain-$VER-3.7 main&amp;quot; | \
  sudo tee /etc/apt/sources.list.d/llvm.list
$ wget -O - http://llvm.org/apt/llvm-snapshot.gpg.key | sudo apt-key add -
$ sudo apt-get update

# All versions
$ sudo apt-get -y install bison build-essential cmake flex git libedit-dev \
  libllvm3.7 llvm-3.7-dev libclang-3.7-dev python zlib1g-dev libelf-dev

# For Lua support
$ sudo apt-get -y install luajit luajit-5.1-dev

$ git clone https://github.com/iovisor/bcc.git
$ mkdir bcc/build; cd bcc/build
$ cmake .. -DCMAKE_INSTALL_PREFIX=/usr
$ make
$ sudo make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After running those commands, I found the various BCC tools, examples,
and manpages installed in &lt;code&gt;/usr/share/bcc&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;using-bcc-s-trace&#34;&gt;Using BCC&amp;rsquo;s &amp;ldquo;trace&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;Now that I had the BCC tools installed, I could use them to gather some
data about my issue. While there&amp;rsquo;s quite a few tools in the BCC
repository to help trace the various Linux subsystems, what I needed was
targeted specifically at the &lt;code&gt;zfs_putpage_commit_cb&lt;/code&gt; function. I wanted
to see if that function was getting called at all; and for that, the &lt;code&gt;trace&lt;/code&gt;
command was just what I needed.&lt;/p&gt;

&lt;p&gt;First I used this tool while running the ZFS modules without my changes,
to provide a baseline:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# /usr/share/bcc/tools/trace -K zfs_putpage_commit_cb 2&amp;gt;/dev/null
PID    TID    COMM         FUNC
27605  27605  readmmap     zfs_putpage_commit_cb
        zfs_putpage_commit_cb+0x1 [kernel]
        zil_commit+0x17 [kernel]
        zpl_writepages+0xd6 [kernel]
        do_writepages+0x1e [kernel]
        __filemap_fdatawrite_range+0xc6 [kernel]
        filemap_write_and_wait_range+0x41 [kernel]
        zpl_fsync+0x3d [kernel]
        vfs_fsync_range+0x4b [kernel]
        sys_msync+0x182 [kernel]
        entry_SYSCALL_64_fastpath+0x1e [kernel]
^C
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the reproducer running in another shell, this told me that this
function definitely was being called when my changes were not applied,
and even provided a stack trace that lead to the function call.&lt;/p&gt;

&lt;p&gt;Now that I verified the behavior without my changes, it was time to run
the same test, but with my modified version of ZFS:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# /usr/share/bcc/tools/trace -K zfs_putpage_commit_cb 2&amp;gt;/dev/null
PID    TID    COMM         FUNC
^C
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just like before, I had the reproducer running in another shell, but
this time the &lt;code&gt;trace&lt;/code&gt; command didn&amp;rsquo;t produce any output, which means the
function wasn&amp;rsquo;t called.&lt;/p&gt;

&lt;p&gt;With these observations in mind, I was able to re-visit the code and
ultimately track down my problem.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OpenZFS: Isolating ZIL Disk Activity</title>
      <link>https://www.prakashsurya.com/post/2017-08-04-openzfs-isolating-zil-disk-activity/</link>
      <pubDate>Fri, 04 Aug 2017 00:00:00 -0800</pubDate>
      
      <guid>https://www.prakashsurya.com/post/2017-08-04-openzfs-isolating-zil-disk-activity/</guid>
      <description>&lt;p&gt;I recently completed a project to improve the performance of the OpenZFS
ZIL (see &lt;a href=&#34;https://github.com/openzfs/openzfs/pull/447&#34;&gt;here&lt;/a&gt; for more
details); i.e. improving the performance of synchronous activity on
OpenZFS, such as writes using the &lt;code&gt;O_SYNC&lt;/code&gt; flag.  As part of that work,
I had to run some performance testing and benchmarking of my code
changes (and the system as a whole), to ensure the system was behaving
as I expected.&lt;/p&gt;

&lt;p&gt;Early on in my benchmarking exercises, I became confused by the data
that I was gathering. I was expecting only a certain number of writes to
be active on the underlying storage devices at any given time, based on
the known workload that I was applying to the zpool, and based on my
understanding of the ZIL&amp;rsquo;s mechanics. When running these known workloads
and inspecting the &lt;code&gt;actv&lt;/code&gt; column from &lt;code&gt;iostat&lt;/code&gt; though, I was
consistently seeing more write activity on the devices than I expected.&lt;/p&gt;

&lt;p&gt;At this point, I was starting to question my understanding of the code
that I had written, and my understanding of the ZIL&amp;rsquo;s mechanics as a
whole. Since I knew exactly the IO workload that was being applied to
the system, why wasn&amp;rsquo;t it behaving as I had predicted?&lt;/p&gt;

&lt;p&gt;After scratching my head and consulting the code numerous times, I asked
Matt Ahrens if he had any clues as to what might be going on. Matt was
quick to remind me that I was failing to incorporate the IO that would
occur as part of &lt;code&gt;spa_sync()&lt;/code&gt; into my mental model. Additionally, he
suggested that since it would be difficult to know exactly how many IOs
to expect from &lt;code&gt;spa_sync()&lt;/code&gt;, which then makes it difficult to verify the
&lt;code&gt;actv&lt;/code&gt; column from &lt;code&gt;iostat&lt;/code&gt; w.r.t. my code changes, I should configure
the system to effectively disable &lt;code&gt;spa_sync()&lt;/code&gt; altogether. This way, all
of the IOs that would be active on the disk would be a result of a ZIL
write, which is exactly what I was previously expecting.&lt;/p&gt;

&lt;p&gt;To acheive this configuration, Matt pointed me at the following kernel
perameters: &lt;code&gt;zfs_dirty_data_max&lt;/code&gt;, &lt;code&gt;zfs_dirty_data_sync&lt;/code&gt;, and
&lt;code&gt;zfs_txg_timeout&lt;/code&gt;. Basically, I had to set all of these values such that
the dirty limit would never be reached, and thus, a TXG sync would never
trigger as a result of the amount of dirty data my workload generated.
Since my test system had 128 GB of RAM, I used the following
commands/values to achieve this configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo mdb -kwe &#39;zfs_dirty_data_max/z 0t68719476736&#39;
$ sudo mdb -kwe &#39;zfs_dirty_data_sync/z 0t34359738368&#39;
$ sudo mdb -kwe &#39;zfs_txg_timeout/z 0t3600&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s also important to note that these values are dependent on the rate
at which my workload would dirty data (i.e. the workload&amp;rsquo;s write
throughput), and the duration of the test. I ensured that the workload
would not be able to dirty enough data to cause TXG sync prior to the
test completing. With all of this configured correctly, the only way
writes would get issued to disk would be via the ZIL, which is exactly
what I wanted.&lt;/p&gt;

&lt;p&gt;Additionally, I further tuned the system to disable the IO aggregation
that ZFS may do when there&amp;rsquo;s sufficient write activity to warrant it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo mdb -kwe &#39;zfs_vdev_aggregation_limit/z 0t0&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While this setting didn&amp;rsquo;t help my workload&amp;rsquo;s throughput, it did help me
validate the correctness of my code changes.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Links</title>
      <link>https://www.prakashsurya.com/link/</link>
      <pubDate>Wed, 19 Apr 2017 00:00:00 -0800</pubDate>
      
      <guid>https://www.prakashsurya.com/link/</guid>
      <description>

&lt;h2 id=&#34;openzfs-related&#34;&gt;OpenZFS Related&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;21 Apr 2017 &amp;raquo; Serapheim Dimitropoulos &amp;raquo;
&lt;a href=&#34;https://sdimitro.github.io/post/zpool-checkpoint/&#34;&gt;ZFS Storage Pool Checkpoint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;12 Apr 2015 &amp;raquo; Ryan Zezeski &amp;raquo;
&lt;a href=&#34;http://zinascii.com/2015/illumos-5498.html&#34;&gt;More Efficient TLB Shootdowns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;06 Jun 2014 &amp;raquo; Matt Ahrens &amp;raquo;
&lt;a href=&#34;http://blog.delphix.com/matt/2014/06/06/zfs-stripe-width/&#34;&gt;ZFS RAIDZ stripe width&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;13 Dec 2012 &amp;raquo; Adam Leventhal &amp;raquo;
&lt;a href=&#34;http://dtrace.org/blogs/ahl/2012/12/13/zfs-fundamentals-transaction-groups/&#34;&gt;ZFS fundamentals: transaction groups&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;15 Dec 2008 &amp;raquo; Matt Ahrens &amp;raquo;
&lt;a href=&#34;https://blogs.oracle.com/ahrens/entry/new_scrub_code&#34;&gt;New Scrub Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;?? Sep 2008 &amp;raquo; Jeff Bonwick and Bill Moore &amp;raquo;
&lt;a href=&#34;https://www.youtube.com/watch?v=NRoUC9P1PmA&amp;amp;list=PL1622CB7988FDD9F5&#34;&gt;ZFS: The Last Word in File Systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;13 Sep 2007 &amp;raquo; Jeff Bonwick &amp;raquo;
&lt;a href=&#34;https://blogs.oracle.com/bonwick/en_US/entry/space_maps&#34;&gt;Space Maps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;17 Nov 2005 &amp;raquo; Matt Ahrens &amp;raquo;
&lt;a href=&#34;https://blogs.oracle.com/ahrens/entry/is_it_magic&#34;&gt;Is it magic?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;30 Aug 2004 &amp;raquo; Matt Ahrens &amp;raquo;
&lt;a href=&#34;https://blogs.oracle.com/ahrens/entry/what_is_zfs&#34;&gt;What is ZFS?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;?? ??? ???? &amp;raquo; Asim Kadav and Abhishek Rajimwale &amp;raquo;
&lt;a href=&#34;http://pages.cs.wisc.edu/~kadav/zfs/zfsrel.pdf&#34;&gt;Reliability Analysis of ZFS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;miscellaneous&#34;&gt;Miscellaneous&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;05 Sep 2017 &amp;raquo; Brendan Gregg &amp;raquo;
&lt;a href=&#34;http://www.brendangregg.com/blog/2017-09-05/solaris-to-linux-2017.html&#34;&gt;Solaris to Linux Migration 2017&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;?? Aug 2017 &amp;raquo; Bryan Cantrill &amp;raquo;
&lt;a href=&#34;http://www.nodesummit.com/videos/?the-video-node2017=45&#34;&gt;Platform as a Reflection of Values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;08 Aug 2017 &amp;raquo; Daniel Vetter &amp;raquo;
&lt;a href=&#34;http://blog.ffwll.ch/2017/08/github-why-cant-host-the-kernel.html&#34;&gt;Why Github can&amp;rsquo;t host the Linux Kernel Community&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;06 Jul 2017 &amp;raquo; Benjamin Pollack &amp;raquo;
&lt;a href=&#34;https://bitquabit.com/post/i-hate-slack-and-you-should-too/&#34;&gt;Why I Hate Slack and You Should Too&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;19 Apr 2017 &amp;raquo; Keegan Lowenstein &amp;raquo;
&lt;a href=&#34;https://blog.bugsnag.com/tmux-and-vim/&#34;&gt;Tmux and Vim - even better together&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;13 Dec 2016 &amp;raquo; Breanne Boland &amp;raquo;
&lt;a href=&#34;https://systemswe.love/archive/san-francisco-2016/man-splained&#34;&gt;Man, &amp;lsquo;splained: 40-Plus Years of Man Page History&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;18 Nov 2016 &amp;raquo; Bryan Cantrill &amp;raquo;
&lt;a href=&#34;https://www.youtube.com/watch?v=4PaWFYm0kEw&#34;&gt;Oral Tradition in Software Engineering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;01 Aug 2016 &amp;raquo; Deviant Ollam &amp;raquo;
&lt;a href=&#34;https://www.youtube.com/watch?v=4YYvBLAF4T8&#34;&gt;The Search for the Perfect Door&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;17 Dec 2015 &amp;raquo; Bryan Cantrill &amp;raquo;
&lt;a href=&#34;http://www.infoq.com/presentations/debugging-microservices-production&#34;&gt;Debugging Microservices in Production&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;02 Dec 2015 &amp;raquo; Rob Pike &amp;raquo;
&lt;a href=&#34;https://www.youtube.com/watch?v=rFejpH_tAHM&#34;&gt;Simplicity is Complicated&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;15 Nov 2015 &amp;raquo; Ryan Zezeski &amp;raquo;
&lt;a href=&#34;https://www.youtube.com/watch?v=HXjIz-RzhK8&#34;&gt;Fixing Bugs in illumos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;03 Sep 2015 &amp;raquo; Bryan Cantrill &amp;raquo;
&lt;a href=&#34;http://dtrace.org/blogs/bmc/2015/09/03/software-immaculate-fetid-and-grimy/&#34;&gt;Software: Immaculate, fetid and grimy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;01 Jul 2015 &amp;raquo; Bryan Cantrill &amp;raquo;
&lt;a href=&#34;https://www.youtube.com/watch?v=sYQ8j02wbCY&#34;&gt;Running Aground: Debugging Docker in Production&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;23 Jun 2015 &amp;raquo; Brendan Gregg &amp;raquo;
&lt;a href=&#34;http://www.brendangregg.com/blog/2015-06-23/netflix-instance-analysis-requirements.html&#34;&gt;Netflix Instance Analysis Requirements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;?? May 2015 &amp;raquo; Dan Luu &amp;raquo;
&lt;a href=&#34;https://danluu.com/monorepo/&#34;&gt;Advantages of monolithic version control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;04 Feb 2015 &amp;raquo; Anthony Stacchi &amp;amp; Graham Annable &amp;raquo;
&lt;a href=&#34;https://www.youtube.com/watch?v=PAK10UAAHIY&#34;&gt;The Making of the Boxtrolls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;14 Nov 2014 &amp;raquo; Brendan Gregg &amp;raquo;
&lt;a href=&#34;https://www.youtube.com/watch?v=7Cyd22kOqWc&#34;&gt;Performance Tuning Amazon EC2 Instances&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;04 Aug 2012 &amp;raquo; Dave Pacheco &amp;raquo;
&lt;a href=&#34;http://dtrace.org/blogs/dap/2012/08/04/illumos-tools-for-observing-processes/&#34;&gt;illumos tools for observing processes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;28 Mar 2011 &amp;raquo; Brandur Leach &amp;raquo;
&lt;a href=&#34;https://mutelight.org/practical-tmux&#34;&gt;Practical Tmux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;11 Dec 2009 &amp;raquo; Bryan Cantrill &amp;raquo;
&lt;a href=&#34;https://www.youtube.com/watch?v=xaLfFhEZdqM&#34;&gt;Visualizing DTrace: Sun Storage 7000 Analytics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;17 Nov 2008 &amp;raquo; Tom Preston-Werner &amp;raquo;
&lt;a href=&#34;http://tom.preston-werner.com/2008/11/17/blogging-like-a-hacker.html&#34;&gt;Blogging Like a Hacker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;12 Dec 2006 &amp;raquo; Adam Leventhal &amp;raquo;
&lt;a href=&#34;https://blogs.oracle.com/ahl/entry/on_testing&#34;&gt;It&amp;rsquo;s tested or it&amp;rsquo;s broken&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;?? ??? 2005 &amp;raquo; David Drysdale &amp;raquo;
&lt;a href=&#34;http://www.lurklurk.org/linkers/linkers.html&#34;&gt;Beginner&amp;rsquo;s Guide to Linkers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;automotive-mechanics&#34;&gt;Automotive Mechanics&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;01 Apr 2016 &amp;raquo; Shane Conley &amp;raquo; &amp;ldquo;How to&amp;rdquo; CV Carburetor &amp;raquo;
&lt;a href=&#34;https://www.youtube.com/watch?v=3FmfO-mWv3Q&#34;&gt;1&lt;/a&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=2XQjEpmJh7g&#34;&gt;2&lt;/a&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=VHY9LB7CUfo&#34;&gt;3&lt;/a&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=g6y32Gw5HK4&#34;&gt;4&lt;/a&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=0xn6juRiryc&#34;&gt;5&lt;/a&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=I9Knm9ML62k&#34;&gt;6&lt;/a&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=wAAxPAvRw6o&#34;&gt;7&lt;/a&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=cufBK75uYdg&#34;&gt;8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;21 Dec 2015 &amp;raquo; Pete&amp;rsquo;s Garage &amp;raquo; Engine Building &amp;raquo;
&lt;a href=&#34;https://www.youtube.com/watch?v=xQFlaDhWsck&#34;&gt;1&lt;/a&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=r1PO26ZqUEs&#34;&gt;2&lt;/a&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=sQhNIiPyTB4&#34;&gt;3&lt;/a&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=iuj9nfQ-LRY&#34;&gt;4&lt;/a&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=HrtQVhcTPFc&#34;&gt;5&lt;/a&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=FzKOx3lZM0Y&#34;&gt;6&lt;/a&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=P89ZDmjXROk&#34;&gt;7&lt;/a&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=1_5TnlX-Ams&#34;&gt;8&lt;/a&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=jgbrPjcd9XY&#34;&gt;9&lt;/a&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=0J3ORGBIq7s&#34;&gt;10&lt;/a&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=yV3iwhXFXkI&#34;&gt;11&lt;/a&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=2K72u7GrxGU&#34;&gt;12&lt;/a&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=swG1R624W6o&#34;&gt;13&lt;/a&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=xAW3g-qz0_U&#34;&gt;14&lt;/a&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=QVVI6QWIA4E&#34;&gt;15&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;14 Apr 2015 &amp;raquo; Bruce Aunkst &amp;raquo;
&lt;a href=&#34;https://www.youtube.com/watch?v=H0GOExal_VA&#34;&gt;Diaphragm Replacement CV Carb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;29 Jun 2012 &amp;raquo; Motorz &amp;raquo; Small Block Chevy Rebuild &amp;raquo;
&lt;a href=&#34;https://www.youtube.com/watch?v=LZO1fWVxN4c&#34;&gt;1&lt;/a&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=e3r3wRBoXkk&#34;&gt;2&lt;/a&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=gfrYWKi78zc&#34;&gt;3&lt;/a&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=g46s-Vr4Br0&#34;&gt;4&lt;/a&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=mvJNMN-oP68&#34;&gt;5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;02 Dec 2009 &amp;raquo; Holley Performance &amp;raquo;
&lt;a href=&#34;https://www.youtube.com/watch?v=ILhfE3yC5Vo&#34;&gt;Holley 4150 and 4160 Carburetors Explained&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;?? ??? ???? &amp;raquo; holley.com &amp;raquo;
&lt;a href=&#34;http://documents.holley.com/techlibrary_carb_numerical_listing.pdf&#34;&gt;Holley Carburetor Numerical Listing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;?? ??? ???? &amp;raquo; jegs.com &amp;raquo;
&lt;a href=&#34;http://www.jegs.com/tech-articles/sbc-engine-specs.html&#34;&gt;Small Block Shevy V8 - Engine Specifications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Running `sshd` on Windows using Cygwin</title>
      <link>https://www.prakashsurya.com/post/2017-03-16-running-sshd-on-windows-using-cygwin/</link>
      <pubDate>Thu, 16 Mar 2017 00:00:00 -0800</pubDate>
      
      <guid>https://www.prakashsurya.com/post/2017-03-16-running-sshd-on-windows-using-cygwin/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;As part of our effort to support &lt;a href=&#34;https://www.delphix.com/&#34;&gt;Delphix&lt;/a&gt; in the &lt;a href=&#34;https://en.wikipedia.org/wiki/Microsoft_Azure&#34;&gt;Azure&lt;/a&gt; cloud
environment, we&amp;rsquo;re writing some automation to convert our &lt;code&gt;.iso&lt;/code&gt; install
media into a &lt;a href=&#34;https://en.wikipedia.org/wiki/VHD_(file_format)&#34;&gt;VHD&lt;/a&gt; image, leveraging &lt;a href=&#34;https://en.wikipedia.org/wiki/Jenkins_(software)&#34;&gt;Jenkins&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Packer_(software)&#34;&gt;Packer&lt;/a&gt; in
the process.&lt;/p&gt;

&lt;p&gt;Essentially, we want to use a &lt;a href=&#34;https://en.wikipedia.org/wiki/Microsoft_Windows&#34;&gt;Windows&lt;/a&gt; server as a Jenkins &amp;ldquo;slave&amp;rdquo;,
and run Packer from within a Jenkins job that will run on that Windows
system.&lt;/p&gt;

&lt;p&gt;In order to do that, the Jenkins &amp;ldquo;master&amp;rdquo; needs to connect with the
Windows system, such that it can configure the system to act as a
Jenkins slave. Additionally, due to some of our existing Jenkins
infrastructure, this requires the Jenkins &amp;ldquo;master&amp;rdquo; using &lt;code&gt;ssh&lt;/code&gt; to
connect to the Windows box. Thus, &lt;code&gt;sshd&lt;/code&gt; is needed on the Windows
system.&lt;/p&gt;

&lt;h2 id=&#34;running-sshd-on-windows-using-cygwin&#34;&gt;Running &lt;code&gt;sshd&lt;/code&gt; on Windows using Cygwin&lt;/h2&gt;

&lt;p&gt;The following is a quick run-down of the steps I needed to perform, to
install and configure &lt;code&gt;sshd&lt;/code&gt; on our Windows server, enabling &lt;code&gt;ssh&lt;/code&gt;
clients (and our Jenkins master) to connect to it:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install Cygwin on the Windows server:

&lt;ul&gt;
&lt;li&gt;I used RDP to connect to the server as the &lt;code&gt;Administrator&lt;/code&gt; user&lt;/li&gt;
&lt;li&gt;Used a web browser to access the &lt;a href=&#34;https://cygwin.com/install.html&#34;&gt;installation instructions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Downloaded the &lt;code&gt;setup-x86_64.exe&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;Executed &lt;code&gt;setup-x86_64.exe&lt;/code&gt;, and followed the setup instructions&lt;/li&gt;
&lt;li&gt;When reaching the package selection screen of the setup wizard, I
explicitly selected the following packages:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cygrunsrv&lt;/code&gt; from the &lt;code&gt;Admin&lt;/code&gt; group&lt;/li&gt;
&lt;li&gt;&lt;code&gt;openssh&lt;/code&gt; from the &lt;code&gt;Net&lt;/code&gt; group&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;After the Cygwin setup finished, I used the instructions found
 &lt;a href=&#34;http://www.noah.org/ssh/cygwin-sshd.html&#34;&gt;here&lt;/a&gt; to configure and start the &lt;code&gt;sshd&lt;/code&gt; service. This involved
 running the following commands in a Cygwin shell:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ssh-host-config -y&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cygrunsrv -S sshd&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;At this point, the &lt;code&gt;sshd&lt;/code&gt; service was running, but the Windows
 server&amp;rsquo;s firewall was blocking incoming connections to port 22. So,
 I had to edit the server&amp;rsquo;s firewall rules to allow incomming
 connections on port 22 (the port &lt;code&gt;sshd&lt;/code&gt; was running on). For this,
 I followed the instructions that I found &lt;a href=&#34;https://techtorials.me/cygwin/configure-windows-firewall/&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;installing-additional-software&#34;&gt;Installing Additional Software&lt;/h2&gt;

&lt;p&gt;In addition to installing Cygwin and running &lt;code&gt;sshd&lt;/code&gt;, we also needed to
perform a little more configuration to the Windows system, as our
Jenkins job had these additional dependencies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To allow ssh access to other systems in our environment from the
Jenkins job, the necessary &lt;code&gt;ssh&lt;/code&gt; keys had to be installed in the
&lt;code&gt;Administrator&lt;/code&gt; user&amp;rsquo;s home directory.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git&lt;/code&gt; was installed using the Cygwin installer.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;packer&lt;/code&gt; was downloaded from the project&amp;rsquo;s &lt;a href=&#34;https://www.packer.io/downloads.html&#34;&gt;download page&lt;/a&gt; and
installed simply by placing the binary at the correct location.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pv&lt;/code&gt; was manually compiled and installed following the directions on
the &lt;a href=&#34;https://sourceforge.net/projects/pvforcygwin/&#34;&gt;project&amp;rsquo;s website&lt;/a&gt;; i.e. using these commands:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;wget http://www.ivarch.com/programs/sources/pv-1.3.4.tar.bz2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tar -xf pv-1.3.4.tar.bz2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd pv-1.3.4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;./configure --prefix=&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make install&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>OpenZFS: Notes on ZIL Transactions</title>
      <link>https://www.prakashsurya.com/post/2017-03-15-notes-on-zil-transactions/</link>
      <pubDate>Wed, 15 Mar 2017 00:00:00 -0800</pubDate>
      
      <guid>https://www.prakashsurya.com/post/2017-03-15-notes-on-zil-transactions/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;http://open-zfs.org&#34;&gt;OpenZFS&lt;/a&gt; &lt;a href=&#34;http://nex7.blogspot.com/2013/04/zfs-intent-log.html&#34;&gt;Intent Log&lt;/a&gt; (ZIL) is used to ensure &lt;a href=&#34;https://en.wikipedia.org/wiki/POSIX&#34;&gt;POSIX&lt;/a&gt;
compliance of certain system calls (that modify the state of a ZFS
dataset), and protect against data loss in the face of failure scenarios
such as: an operating system crash, power loss, etc. Specifically, it&amp;rsquo;s
used as a performance optimization so that applications can be assured
that their given system call, and any &amp;ldquo;user data&amp;rdquo; associated with it,
will not be &amp;ldquo;lost&amp;rdquo;, without having to wait for an entire &lt;a href=&#34;https://www.delphix.com/blog/delphix-engineering/zfs-fundamentals-transaction-groups&#34;&gt;transaction
group&lt;/a&gt; (TXG) to be synced out (which can take on the order of
seconds, on a moderately loaded system).&lt;/p&gt;

&lt;p&gt;So how does this process work? How are these system calls tracked? This
post will attempt to explain how the system calls enter the ZIL, and how
they&amp;rsquo;re tracked by the in-memory portion of the ZIL. What isn&amp;rsquo;t covered
in this post is how the in-memory representation of the system calls get
written to disk, nor how the on-disk ZIL is used to &amp;ldquo;replay&amp;rdquo; the system
calls after a failure event.&lt;/p&gt;

&lt;h2 id=&#34;zfs-intent-log-transactions&#34;&gt;ZFS Intent Log Transactions&lt;/h2&gt;

&lt;p&gt;Much like how ZFS&amp;rsquo;s DMU layer operates on the notion of &amp;ldquo;transactions&amp;rdquo;,
so does the ZIL. For each system call that modifies a dataset&amp;rsquo;s state, a
ZIL transaction is created; referred to as an &lt;code&gt;itx&lt;/code&gt; in the code and this
document. It&amp;rsquo;s important to note, these &lt;code&gt;itx&lt;/code&gt;&amp;rsquo;s are created for
&amp;ldquo;synchronous&amp;rdquo; system calls, as well as &amp;ldquo;asynchronous&amp;rdquo; ones. For example,
an &lt;code&gt;itx&lt;/code&gt; will be generated by an application calling &lt;code&gt;write&lt;/code&gt; on a ZFS
dataset, whether the &lt;code&gt;O_SYNC&lt;/code&gt; flag is used or not. Additionally, &lt;em&gt;all&lt;/em&gt;
system calls that modify a dataset will cause an &lt;code&gt;itx&lt;/code&gt; to be generated;
e.g. &lt;code&gt;write&lt;/code&gt;, &lt;code&gt;rename&lt;/code&gt;, &lt;code&gt;setattr&lt;/code&gt;, etc. all will generate an &lt;code&gt;itx&lt;/code&gt;
unique to that system call.&lt;/p&gt;

&lt;h3 id=&#34;in-memory-representation-of-zil-transactions&#34;&gt;In-Memory Representation of ZIL Transactions&lt;/h3&gt;

&lt;p&gt;Each &lt;code&gt;itx&lt;/code&gt; is composed of an &lt;code&gt;itx_t&lt;/code&gt;, as well as a system call specific
component. The &lt;code&gt;itx_t&lt;/code&gt; portion looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;typedef struct itx {
	list_node_t	itx_node;	/* linkage on zl_itx_list */
	void		*itx_private;	/* type-specific opaque data */
	itx_wr_state_t	itx_wr_state;	/* write state */
	uint8_t		itx_sync;	/* synchronous transaction */
	uint64_t	itx_sod;	/* record size on disk */
	uint64_t	itx_oid;	/* object id */
	lr_t		itx_lr;		/* common part of log record */
	/* followed by type-specific part of lr_xx_t and its immediate data */
} itx_t;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And for a &lt;code&gt;write&lt;/code&gt; system call, the &lt;code&gt;lr_write_t&lt;/code&gt; structure would be
tacked onto the end of the &lt;code&gt;itx_t&lt;/code&gt;; this structure looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;typedef struct {
	lr_t		lr_common;	/* common portion of log record */
	uint64_t	lr_foid;	/* file object to write */
	uint64_t	lr_offset;	/* offset to write to */
	uint64_t	lr_length;	/* user data length to write */
	uint64_t	lr_blkoff;	/* no longer used */
	blkptr_t	lr_blkptr;	/* spa block pointer for replay */
	/* write data will follow for small writes */
} lr_write_t;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thus, the in-memory representation for a &lt;code&gt;write&lt;/code&gt; &lt;code&gt;itx&lt;/code&gt; actually looks
like the following (assuming a small amount of data is being written):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct {
	itx_t common;
	lr_write_t uncommon;
	void *data;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The portion of the structure that&amp;rsquo;s common to all &lt;code&gt;itx&lt;/code&gt; types starts at
offset 0, the write specific portion immediately follows the &lt;code&gt;itx_t&lt;/code&gt;,
and then finally the user-data that is being written.&lt;/p&gt;

&lt;h3 id=&#34;determing-the-type-of-a-zil-transaction&#34;&gt;Determing the Type of a ZIL Transaction&lt;/h3&gt;

&lt;p&gt;Since the last structure depicted in the previous section doesn&amp;rsquo;t
actually exist, it&amp;rsquo;s important to understand how the code is able to
determine which structure follows the &lt;code&gt;itx_t&lt;/code&gt; portion of an &lt;code&gt;itx&lt;/code&gt;; since
it could be any one of the many options (e.g. &lt;code&gt;lr_write_t&lt;/code&gt;,
&lt;code&gt;lr_rename_t&lt;/code&gt;, &lt;code&gt;lr_setattr_t&lt;/code&gt;, etc).&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;lr_t&lt;/code&gt; contained within the &lt;code&gt;itx_t&lt;/code&gt; is used for this purpose. It
contains an &lt;code&gt;lrc_txtype&lt;/code&gt; field, which can be used to determine the
&lt;code&gt;itx&lt;/code&gt;&amp;rsquo;s type. For example, if the &lt;code&gt;itx&lt;/code&gt; was for a &lt;code&gt;write&lt;/code&gt;, &lt;code&gt;lrc_tx_type&lt;/code&gt;
would equal &lt;code&gt;TX_WRITE&lt;/code&gt;, and the &lt;code&gt;lr_write_t&lt;/code&gt; could be obtained like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ASSERT(itx-&amp;gt;itx_lr.lrc_txtype == TX_WRITE);
lr_write_t *lr = (lr_write_t *)&amp;amp;itx-&amp;gt;itx_lr;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;zil-transactions-by-example&#34;&gt;ZIL Transactions by Example&lt;/h2&gt;

&lt;p&gt;Now that we have a brief understanding of what an &lt;code&gt;itx&lt;/code&gt; is, lets look at
how these are generated and added to the ZIL; we&amp;rsquo;ll be using
&lt;code&gt;zfs_write&lt;/code&gt; as the example code path.&lt;/p&gt;

&lt;h3 id=&#34;accessing-the-in-memory-zil-structure&#34;&gt;Accessing the In-Memory ZIL Structure&lt;/h3&gt;

&lt;p&gt;The first line of code within &lt;code&gt;zfs_write&lt;/code&gt; that pertains to the ZIL&amp;rsquo;s
machinery is this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;zilog = zfsvfs-&amp;gt;z_log;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to manipulate the ZIL, a pointer to the ZIL structure (i.e. the
&lt;code&gt;zilog_t&lt;/code&gt;) is needed. This is obtained using the &lt;code&gt;vnode_t&lt;/code&gt; (passed in as
a parameter to &lt;code&gt;zfs_write&lt;/code&gt;) to extract a pointer to the corresponding
&lt;code&gt;znode_t&lt;/code&gt;; the &lt;code&gt;v_data&lt;/code&gt; field of the &lt;code&gt;vnode_t&lt;/code&gt; holds a pointer to the
&lt;code&gt;znode_t&lt;/code&gt;. Once we have the &lt;code&gt;znode_t&lt;/code&gt; for this specific file, it&amp;rsquo;s
trivial to use its &lt;code&gt;z_zfsvfs&lt;/code&gt; field to access the &lt;code&gt;zfsvfs_t&lt;/code&gt;, and then
the &lt;code&gt;z_log&lt;/code&gt; field to access the &lt;code&gt;zilog_t&lt;/code&gt;. It&amp;rsquo;s worth noting that the
&lt;code&gt;zilog_t&lt;/code&gt; is shared across all files in the same dataset (i.e. there&amp;rsquo;s a
single ZIL per ZFS dataset).&lt;/p&gt;

&lt;h3 id=&#34;zil-transaction-creation-and-assignment&#34;&gt;ZIL Transaction Creation and Assignment&lt;/h3&gt;

&lt;p&gt;Once the &lt;code&gt;zilog_t&lt;/code&gt; structure is obtained, the next line within
&lt;code&gt;zfs_write&lt;/code&gt; pertaining to the ZIL is this one:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;zfs_log_write(zilog, tx, TX_WRITE, zp, woff, tx_bytes, ioflag);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;zfs_log_write&lt;/code&gt; function is used to create new &lt;code&gt;itx&lt;/code&gt;s, as well as
insert them into one of the ZIL&amp;rsquo;s list of transactions.&lt;/p&gt;

&lt;h4 id=&#34;zil-itx-create&#34;&gt;&lt;code&gt;zil_itx_create&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Inside of &lt;code&gt;zil_log_write&lt;/code&gt;, the function &lt;code&gt;zil_itx_create&lt;/code&gt; is used to
allocate one or more &lt;code&gt;itx_t&lt;/code&gt; structures to represent the &lt;code&gt;write&lt;/code&gt; system
within the in-memory portion of the ZIL. That can be seen here:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;while (resid) {
	itx_t *itx;
	lr_write_t *lr;
	ssize_t len;

	/*
	 * If the write would overflow the largest block then split it.
	 */
	if (write_state != WR_INDIRECT &amp;amp;&amp;amp; resid &amp;gt; ZIL_MAX_LOG_DATA)
		len = SPA_OLD_MAXBLOCKSIZE &amp;gt;&amp;gt; 1;
	else
		len = resid;

	// ... &amp;lt;snip&amp;gt; ...

	itx = zil_itx_create(txtype, sizeof (*lr) +
	    (write_state == WR_COPIED ? len : 0));

	// ... &amp;lt;snip&amp;gt; ...

	resid -= len;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where &lt;code&gt;zil_itx_create&lt;/code&gt; simply allocates and initializes the in-memory
&lt;code&gt;itx_t&lt;/code&gt; structure:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;itx_t *
zil_itx_create(uint64_t txtype, size_t lrsize)
{
	itx_t *itx;

	lrsize = P2ROUNDUP_TYPED(lrsize, sizeof (uint64_t), size_t);

	itx = kmem_alloc(offsetof(itx_t, itx_lr) + lrsize, KM_SLEEP);
	itx-&amp;gt;itx_lr.lrc_txtype = txtype;
	itx-&amp;gt;itx_lr.lrc_reclen = lrsize;
	itx-&amp;gt;itx_sod = lrsize; /* if write &amp;amp; WR_NEED_COPY will be increased */
	itx-&amp;gt;itx_lr.lrc_seq = 0;	/* defensive */
	itx-&amp;gt;itx_sync = B_TRUE;		/* default is synchronous */

	return (itx);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thus, for a single &lt;code&gt;write&lt;/code&gt; (and single call to &lt;code&gt;zfs_log_write&lt;/code&gt;), 1 or
more &lt;code&gt;itx&lt;/code&gt;s will be created to represent the system call.&lt;/p&gt;

&lt;h4 id=&#34;zil-itx-assign&#34;&gt;&lt;code&gt;zil_itx_assign&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;At this point, the &lt;code&gt;itx&lt;/code&gt;s representing the &lt;code&gt;write&lt;/code&gt; will have been
allocated and initialized, but they&amp;rsquo;re not yet part of the ZIL. In order
to add the &lt;code&gt;itx&lt;/code&gt;s to the ZIL, the &lt;code&gt;zil_itx_assign&lt;/code&gt; function is used.
Expanding the previous code snippet from &lt;code&gt;zfs_write&lt;/code&gt;, we can see that
&lt;code&gt;zil_itx_assign&lt;/code&gt; is called immediately after the individual &lt;code&gt;itx&lt;/code&gt;s are
created and initialized:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;while (resid) {
	itx_t *itx;
	lr_write_t *lr;
	ssize_t len;

	/*
	 * If the write would overflow the largest block then split it.
	 */
	if (write_state != WR_INDIRECT &amp;amp;&amp;amp; resid &amp;gt; ZIL_MAX_LOG_DATA)
		len = SPA_OLD_MAXBLOCKSIZE &amp;gt;&amp;gt; 1;
	else
		len = resid;

	itx = zil_itx_create(txtype, sizeof (*lr) +
	    (write_state == WR_COPIED ? len : 0));
	lr = (lr_write_t *)&amp;amp;itx-&amp;gt;itx_lr;
	if (write_state == WR_COPIED &amp;amp;&amp;amp; dmu_read(zp-&amp;gt;z_zfsvfs-&amp;gt;z_os,
	    zp-&amp;gt;z_id, off, len, lr + 1, DMU_READ_NO_PREFETCH) != 0) {
		zil_itx_destroy(itx);
		itx = zil_itx_create(txtype, sizeof (*lr));
		lr = (lr_write_t *)&amp;amp;itx-&amp;gt;itx_lr;
		write_state = WR_NEED_COPY;
	}

	itx-&amp;gt;itx_wr_state = write_state;
	if (write_state == WR_NEED_COPY)
		itx-&amp;gt;itx_sod += len;
	lr-&amp;gt;lr_foid = zp-&amp;gt;z_id;
	lr-&amp;gt;lr_offset = off;
	lr-&amp;gt;lr_length = len;
	lr-&amp;gt;lr_blkoff = 0;
	BP_ZERO(&amp;amp;lr-&amp;gt;lr_blkptr);

	itx-&amp;gt;itx_private = zp-&amp;gt;z_zfsvfs;

	if (!(ioflag &amp;amp; (FSYNC | FDSYNC)) &amp;amp;&amp;amp; (zp-&amp;gt;z_sync_cnt == 0) &amp;amp;&amp;amp;
	    (fsync_cnt == 0))
		itx-&amp;gt;itx_sync = B_FALSE;

	zil_itx_assign(zilog, itx, tx);

	off += len;
	resid -= len;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The purpose of &lt;code&gt;zil_itx_assign&lt;/code&gt; is to insert the new &lt;code&gt;itx&lt;/code&gt; into one of
the ZIL&amp;rsquo;s list of transactions; the details of that process is covered
next (it&amp;rsquo;s complicated enough to warrant a new section).&lt;/p&gt;

&lt;h3 id=&#34;zl-itxg-4-i-sync-list-i-async-tree-and-ia-list&#34;&gt;&lt;code&gt;zl_itxg[4]&lt;/code&gt;, &lt;code&gt;i_sync_list&lt;/code&gt;, &lt;code&gt;i_async_tree&lt;/code&gt;, and &lt;code&gt;ia_list&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;In order to fully understand how a given &lt;code&gt;itx&lt;/code&gt; gets inserted into the
in memory representation of the ZIL (via &lt;code&gt;zil_itx_assign&lt;/code&gt;), one has to
understand a few things about the &lt;code&gt;zilog_t&lt;/code&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;zl_itxg&lt;/code&gt; field of the &lt;code&gt;zilog_t&lt;/code&gt; contains 4 unique &lt;code&gt;itxg_t&lt;/code&gt;s,
 and each &lt;code&gt;itxg_t&lt;/code&gt; maps to a particular DMU transaction group. Each
 &lt;code&gt;itx&lt;/code&gt; created is applicable to a specific DMU transaction (&lt;code&gt;tx&lt;/code&gt;),
 which is then applicable to a specific DMU transaction group
 (&lt;code&gt;txg&lt;/code&gt;). Thus, the &lt;code&gt;tx&lt;/code&gt; is used to determine the &lt;code&gt;txg&lt;/code&gt; for this
 specific &lt;code&gt;itx&lt;/code&gt;, and the &lt;code&gt;txg&lt;/code&gt; is used to determine which of the 4
 different &lt;code&gt;itxg_t&lt;/code&gt;s (from the &lt;code&gt;zl_itxg&lt;/code&gt; array) will be used when
 inserting the &lt;code&gt;itx&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Each of the 4 &lt;code&gt;itxg_t&lt;/code&gt;&amp;rsquo;s maintain a:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;i_sync_list&lt;/code&gt; which is a simple linked list of &lt;code&gt;itx_t&lt;/code&gt; structures.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;i_async_tree&lt;/code&gt; which is an AVL tree of &lt;code&gt;itx_async_node_t&lt;/code&gt;
structures (indexed by DMU object ID), where each node in the tree
(each &lt;code&gt;itx_async_node_t&lt;/code&gt;) maintains its own &lt;code&gt;ia_list&lt;/code&gt;, which is a
linked list of &lt;code&gt;itx_t&lt;/code&gt; structures.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Below is a diagram that attempts to illustrate this (it&amp;rsquo;s not as
complicated as the above explanation might sound):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;zil-itx-lists.png&#34; alt=&#34;ZIL Transaction Lists&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;insertion-of-a-zil-transaction&#34;&gt;Insertion of a ZIL Transaction&lt;/h3&gt;

&lt;p&gt;So, when &lt;code&gt;zil_itx_assign&lt;/code&gt; is called in the context of &lt;code&gt;zfs_log_write&lt;/code&gt;,
the &lt;code&gt;itx&lt;/code&gt; will be inserted into one of &lt;code&gt;itxg_t&lt;/code&gt;&amp;rsquo;s lists described in the
previous section. The following logic/criteria is used to decide which
list to use, when inserting the new &lt;code&gt;itx&lt;/code&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;First, which of the 4 &lt;code&gt;itxg_t&lt;/code&gt;s needs to be chosen. The &lt;code&gt;txg&lt;/code&gt; that
 the given &lt;code&gt;itx&lt;/code&gt; is associated with is used to make this decision.
 &lt;code&gt;dmu_tx_get_txg&lt;/code&gt; is used to obtain the &lt;code&gt;txg&lt;/code&gt; from the &lt;code&gt;itx&lt;/code&gt;&amp;rsquo;s &lt;code&gt;tx&lt;/code&gt;,
 and then the &lt;code&gt;txg&lt;/code&gt; is bit-wise AND-ed with &lt;code&gt;TXG_MASK&lt;/code&gt; to determine
 which &lt;code&gt;itxg_t&lt;/code&gt; to use.&lt;/li&gt;
&lt;li&gt;Now that the &lt;code&gt;itxg_t&lt;/code&gt; is chosen, the linked list that will be used
 when inserting the &lt;code&gt;itx&lt;/code&gt; needs to be decided. This depends on the
 value of the &lt;code&gt;itx&lt;/code&gt;&amp;rsquo;s &lt;code&gt;itx_sync&lt;/code&gt; field (i.e. based on if the write
 is synchronous or not):

&lt;ul&gt;
&lt;li&gt;If &lt;code&gt;itx_sync&lt;/code&gt; is &lt;code&gt;TRUE&lt;/code&gt;, the &lt;code&gt;itx&lt;/code&gt; is appended to the
&lt;code&gt;i_sync_list&lt;/code&gt; of the &lt;code&gt;itxg_t&lt;/code&gt; chosen in (1).&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;itx_sync&lt;/code&gt; is &lt;code&gt;FALSE&lt;/code&gt;, &lt;code&gt;avl_find&lt;/code&gt; is used to find the
&lt;code&gt;itx_asnyc_node_t&lt;/code&gt; for the specific file being written, from
the &lt;code&gt;i_async_tree&lt;/code&gt; of the &lt;code&gt;itxg_t&lt;/code&gt; chosen in (1). Once the
&lt;code&gt;itx_async_node_t&lt;/code&gt; is found, the &lt;code&gt;itx&lt;/code&gt; is appended to that
structure&amp;rsquo;s &lt;code&gt;ia_list&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once the &lt;code&gt;itx&lt;/code&gt; has been assigned to either the &lt;code&gt;i_sync_list&lt;/code&gt; or one of
the &lt;code&gt;ia_list&lt;/code&gt; lists (contained in the &lt;code&gt;itx_async_node_t&lt;/code&gt;), the work of
&lt;code&gt;zfs_log_write&lt;/code&gt; is finished. This specific &lt;code&gt;write&lt;/code&gt; system call has been
recorded and inserted into the in-memory representation of the ZIL, but
this record will still be lost if a power loss were to happen at this
point.&lt;/p&gt;

&lt;p&gt;In order for the record of the &lt;code&gt;write&lt;/code&gt; to persist in the event of a
power loss (or an equivalent operating system crash), the &lt;code&gt;itx&lt;/code&gt;s need
to be written to the on-disk representation of the ZIL. Notes on that
process will be left for another post.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OpenZFS: Refresher on `zpool reguid` Using Examples</title>
      <link>https://www.prakashsurya.com/post/2017-02-22-openzfs-refresher-on-zpool-reguid-using-examples/</link>
      <pubDate>Wed, 22 Feb 2017 00:00:00 -0800</pubDate>
      
      <guid>https://www.prakashsurya.com/post/2017-02-22-openzfs-refresher-on-zpool-reguid-using-examples/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;zpool reguid&lt;/code&gt; command can be used to regenerate the &lt;a href=&#34;https://utcc.utoronto.ca/~cks/space/blog/solaris/ZFSGuids&#34;&gt;GUID&lt;/a&gt;
for an &lt;a href=&#34;http://www.open-zfs.org&#34;&gt;OpenZFS&lt;/a&gt; pool, which is useful when using device level
copies to generate multiple pools all with the same contents.&lt;/p&gt;

&lt;h2 id=&#34;example-using-file-vdevs&#34;&gt;Example using File VDEVs&lt;/h2&gt;

&lt;p&gt;As a contrived example, lets create a zpool backed by a single file
vdev:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# mkdir /tmp/tank1
# mkfile -n 256m /tmp/tank1/vdev
# zpool create tank1 /tmp/tank1/vdev
# zpool list tank1
NAME    SIZE  ALLOC   FREE  EXPANDSZ   FRAG    CAP  DEDUP  HEALTH  ALTROOT
tank1   240M    78K   240M         -     1%     0%  1.00x  ONLINE  -
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can export this zpool, copy the file, and attempt to import two
identical zpools; one backed by the original file we created above, and
another zpool backed by the copy of the original file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# zpool export tank1
# mkdir /tmp/tank2
# cp /tmp/tank1/vdev /tmp/tank2/vdev
# zpool import -d /tmp/tank1 tank1
# zpool import -d /tmp/tank2 tank1 tank2
cannot import &#39;tank1&#39;: a pool with that name is already created/imported,
and no additional pools with that name were found
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While the intention was to have two pools imported, &lt;code&gt;tank1&lt;/code&gt; and &lt;code&gt;tank2&lt;/code&gt;,
as one can see, the second &lt;code&gt;zpool import&lt;/code&gt; failed. The failure was due
to the two pools sharing the same GUID; we can verify the two pools
share the same GUID using &lt;code&gt;zdb&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# zpool export tank1
# zdb -e -p /tmp/tank1 -C tank1 | grep pool_guid
        pool_guid: 750003400893681264
# zdb -e -p /tmp/tank2 -C tank1 | grep pool_guid
        pool_guid: 750003400893681264
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is where &lt;code&gt;zpool reguid&lt;/code&gt; becomes useful; after importing &lt;code&gt;tank1&lt;/code&gt; we
can use &lt;code&gt;zpool reguid&lt;/code&gt; to change that zpool&amp;rsquo;s GUID such that we can then
import &lt;code&gt;tank2&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# zpool import -d /tmp/tank1 tank1
# zpool reguid tank1
# zpool import -d /tmp/tank2 tank1 tank2
# zpool list tank1 tank2
NAME    SIZE  ALLOC   FREE  EXPANDSZ   FRAG    CAP  DEDUP  HEALTH  ALTROOT
tank1   240M   110K   240M         -     3%     0%  1.00x  ONLINE  -
tank2   240M   114K   240M         -     2%     0%  1.00x  ONLINE  -
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Additionally, we can use &lt;code&gt;zdb&lt;/code&gt; again to verify the GUID for the two
pools is different:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# zdb -C tank1 | grep pool_guid
        pool_guid: 12195257967456241841
# zdb -C tank2 | grep pool_guid
        pool_guid: 750003400893681264
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;note: we don&amp;rsquo;t need the &lt;code&gt;-e&lt;/code&gt; and &lt;code&gt;-p&lt;/code&gt; options like before, because these
two pools are imported.&lt;/p&gt;

&lt;h2 id=&#34;examples-using-damaged-zpools&#34;&gt;Examples Using Damaged ZPOOLs&lt;/h2&gt;

&lt;p&gt;The manpage for the &lt;code&gt;zpool reguid&lt;/code&gt; command states this can only be used
on zpools that are &amp;ldquo;online and healthy&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     zpool reguid pool
             Generates a new unique identifier for the pool. You must ensure
             that all devices in this pool are online and healthy before
             performing this action.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, what happens when a device is damaged and this command is attempted
to be used? Let&amp;rsquo;s try some examples and find out.&lt;/p&gt;

&lt;h3 id=&#34;example-using-a-damaged-vdev-in-an-empty-zpool&#34;&gt;Example Using a Damaged VDEV in an Empty ZPOOL&lt;/h3&gt;

&lt;p&gt;For this example, we&amp;rsquo;ll create another zpool using file based VDEVs, but
this time the zpool will be striped across 3 files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# mkdir /tmp/tank
# mkfile -n 256m /tmp/tank/vdev1
# mkfile -n 256m /tmp/tank/vdev2
# mkfile -n 256m /tmp/tank/vdev3
# zpool create tank /tmp/tank/vdev{1,2,3}
# zpool list -v tank
NAME                SIZE  ALLOC   FREE  EXPANDSZ   FRAG    CAP  DEDUP  HEALTH  ALTROOT
tank                720M    78K   720M         -     0%     0%  1.00x  ONLINE  -
  /tmp/tank/vdev1   240M    30K   240M         -     0%     0%
  /tmp/tank/vdev2   240M    18K   240M         -     0%     0%
  /tmp/tank/vdev3   240M    30K   240M         -     0%     0%
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now lets damage the pool by writing random data over the most of one of
the VDEVs. We explicitly avoid writing to the first and last 1MB of the
file to leave the VDEV&amp;rsquo;s labels intact.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@oi-hipster:~# dd if=/dev/urandom of=/tmp/tank/vdev3 bs=1M seek=1 count=254
254+0 records in
254+0 records out
266338304 bytes transferred in 4.534832 secs (58731677 bytes/sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To verify the damage, we use &lt;code&gt;zpool scrub&lt;/code&gt; and &lt;code&gt;zpool status&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# zpool scrub
# zpool status -v tank
  pool: tank
 state: DEGRADED
status: One or more devices has experienced an unrecoverable error.  An
        attempt was made to correct the error.  Applications are unaffected.
action: Determine if the device needs to be replaced, and clear the errors
        using &#39;zpool clear&#39; or replace the device with &#39;zpool replace&#39;.
   see: http://illumos.org/msg/ZFS-8000-9P
  scan: scrub repaired 28.5K in 0h0m with 0 errors on Wed Feb 22 22:34:18 2017
config:

        NAME               STATE     READ WRITE CKSUM
        tank               DEGRADED     0     0     0
          /tmp/tank/vdev1  ONLINE       0     0     0
          /tmp/tank/vdev2  ONLINE       0     0     0
          /tmp/tank/vdev3  DEGRADED     0     0    24  too many errors

errors: No known data errors
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, when we attempt to run &lt;code&gt;zpool reguid&lt;/code&gt;, the command fails due to the
zpool being in an unhealthy state:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# zpool reguid tank
cannot reguid &#39;tank&#39;: one or more devices is currently unavailable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;but if we use &lt;code&gt;zpool clear&lt;/code&gt; to bring the pool back into a healthy state,
we can issue the &lt;code&gt;zpool reguid&lt;/code&gt; command without issues:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# zpool clear tank
# zpool reguid tank
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;note: remember that &lt;code&gt;zpool scrub&lt;/code&gt; will have corrected the damage
previously done by &lt;code&gt;dd&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;example-using-a-damaged-vdev-in-a-non-empty-zpool&#34;&gt;Example Using a Damaged VDEV in a Non-Empty ZPOOL&lt;/h3&gt;

&lt;p&gt;Exanding on the previous example, we&amp;rsquo;ll perform an almost identical
test, except we&amp;rsquo;ll now fill the zpool with a 256MB file instead of using
an empty zpool. So, again, we start by creating the zpool and our 256MB
file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# zpool export tank
# rm /tmp/tank/*
# mkfile -n 256m /tmp/tank/vdev1
# mkfile -n 256m /tmp/tank/vdev2
# mkfile -n 256m /tmp/tank/vdev3
# zpool create tank /tmp/tank/vdev{1,2,3}
# dd if=/dev/urandom of=/tank/file bs=1M count=256
256+0 records in
256+0 records out
268435456 bytes transferred in 4.641438 secs (57834542 bytes/sec)
# zpool list -v tank
NAME                SIZE  ALLOC   FREE  EXPANDSZ   FRAG    CAP  DEDUP  HEALTH  ALTROOT
tank                720M   256M   464M         -    10%    35%  1.00x  ONLINE  -
  /tmp/tank/vdev1   240M  85.3M   155M         -    11%    35%
  /tmp/tank/vdev2   240M  85.3M   155M         -    10%    35%
  /tmp/tank/vdev3   240M  85.8M   154M         -    10%    35%
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now damaging the VDEV, and running &lt;code&gt;zpool scrub&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# dd if=/dev/urandom of=/tmp/tank/vdev3 bs=1M seek=1 count=254
254+0 records in
254+0 records out
266338304 bytes transferred in 4.225401 secs (63032676 bytes/sec)
# zpool scrub tank
# zpool status -v tank
  pool: tank
 state: DEGRADED
status: One or more devices has experienced an error resulting in data
        corruption.  Applications may be affected.
action: Restore the file in question if possible.  Otherwise restore the
        entire pool from backup.
   see: http://illumos.org/msg/ZFS-8000-8A
  scan: scrub repaired 87.5K in 0h0m with 686 errors on Wed Feb 22 22:58:40 2017
config:

        NAME               STATE     READ WRITE CKSUM
        tank               DEGRADED     0     0   686
          /tmp/tank/vdev1  ONLINE       0     0     0
          /tmp/tank/vdev2  ONLINE       0     0     0
          /tmp/tank/vdev3  DEGRADED     0     0 1.37K  too many errors

errors: Permanent errors have been detected in the following files:

        /tank/file
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As expected, there&amp;rsquo;s &amp;ldquo;Permanent errors&amp;rdquo; detected to the file that we
created, but the pool itself should still be intact and reparied by the
&lt;code&gt;zpool scrub&lt;/code&gt;. Thus, we&amp;rsquo;ll use &lt;code&gt;zpool clear&lt;/code&gt; to clear the errors like we
did in the previous example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# zpool clear tank
# zpool status -v tank
  pool: tank
 state: ONLINE
status: One or more devices has experienced an error resulting in data
        corruption.  Applications may be affected.
action: Restore the file in question if possible.  Otherwise restore the
        entire pool from backup.
   see: http://illumos.org/msg/ZFS-8000-8A
  scan: scrub repaired 87.5K in 0h0m with 686 errors on Wed Feb 22 22:58:40 2017
config:

        NAME               STATE     READ WRITE CKSUM
        tank               ONLINE       0     0     0
          /tmp/tank/vdev1  ONLINE       0     0     0
          /tmp/tank/vdev2  ONLINE       0     0     0
          /tmp/tank/vdev3  ONLINE       0     0     0

errors: Permanent errors have been detected in the following files:

        /tank/file
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, I would expect that we could now use &lt;code&gt;zpool reguid&lt;/code&gt;
on this zpool; even though there&amp;rsquo;s &amp;ldquo;Permanent errors&amp;rdquo; in the user data
file, the pool is online an healthy.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# zdb -C tank | grep pool_guid
        pool_guid: 6847294342266961459
# zpool reguid tank
# zdb -C tank | grep pool_guid
        pool_guid: 13248255241205296188
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and this is exactly the behavior seen.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Creating a Custom Amazon EC2 AMI from ISO (using OI Hipster)</title>
      <link>https://www.prakashsurya.com/post/2017-02-06-creating-a-custom-amazon-ec2-ami-from-iso/</link>
      <pubDate>Mon, 06 Feb 2017 00:00:00 -0800</pubDate>
      
      <guid>https://www.prakashsurya.com/post/2017-02-06-creating-a-custom-amazon-ec2-ami-from-iso/</guid>
      <description>

&lt;h2 id=&#34;preface&#34;&gt;Preface&lt;/h2&gt;

&lt;p&gt;In this post, I&amp;rsquo;ll pick up from where I left off
&lt;a href=&#34;https://www.prakashsurya.com/post/2017-02-01-creating-custom-istallation-media-for-oi-hipster/&#34;&gt;last time&lt;/a&gt;, and demonstrate one potential way to convert
the installation ISO media generated in that post, into an &lt;a href=&#34;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIs.html&#34;&gt;AMI&lt;/a&gt;
that can be used to create new VMs in the &lt;a href=&#34;https://aws.amazon.com/documentation/ec2/&#34;&gt;Amazon EC2&lt;/a&gt; environment.
It&amp;rsquo;s important to note a couple things before we start:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;While I&amp;rsquo;ll be generating an AMI based on &lt;a href=&#34;https://wiki.openindiana.org/oi/Hipster&#34;&gt;OI Hipster&lt;/a&gt;,
 this process should be applicable to any Linux or FreeBSD based
 operating system as well (and quite possibly Windows too, but I
 don&amp;rsquo;t know much about that platform).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;I make no gaurantees about whether the process that&amp;rsquo;ll be
 demonstrated is correct, efficient, or complete. I have little
 to no expertise in this area, and this is simply a write up of the
 notes that I took as I was teaching myself how to do this. Just
 because the process below worked for me, does not necessarily mean
 it will work for anybody else. Thus, if you&amp;rsquo;re using this as a
 guide to create your own custom AMI(s), be aware, YMMV.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With that out of the way, lets get started.&lt;/p&gt;

&lt;h2 id=&#34;step-0-create-template-for-root-volume-of-ami&#34;&gt;Step 0: Create Template for Root Volume of AMI&lt;/h2&gt;

&lt;p&gt;The first step that we need to perform, is to create a disk image
that&amp;rsquo;ll be used as the template for the root volume of the AMI that
we&amp;rsquo;ll be creating. If you already have a &lt;code&gt;raw&lt;/code&gt; VM disk image that you
intend to use as the AMI root volume template, than this step can be
skipped. For the sake of completeness, I&amp;rsquo;m including one possible way to
generate this &lt;code&gt;raw&lt;/code&gt; disk image, that&amp;rsquo;ll then be used in later steps.&lt;/p&gt;

&lt;p&gt;In order to generate this &lt;code&gt;raw&lt;/code&gt; disk image, we&amp;rsquo;ll create a VM that&amp;rsquo;ll be
used to execute the ISO installer, which will install our operating
system (OI Hipster, in my case) onto a &amp;ldquo;disk&amp;rdquo;, that we can then upload
to Amazon and use as our AMI&amp;rsquo;s root volume template.&lt;/p&gt;

&lt;p&gt;For this guide, I&amp;rsquo;ll be using a &lt;a href=&#34;https://www.debian.org/&#34;&gt;Debian&lt;/a&gt; server that&amp;rsquo;s
configured as a &lt;a href=&#34;https://wiki.debian.org/Xen&#34;&gt;Xen host&lt;/a&gt; to create the VM and disk image.
First, lets create a sparse file that&amp;rsquo;ll be attached as the VM&amp;rsquo;s only
virtual disk; after the ISO installation completes, this file will be
our &lt;code&gt;raw&lt;/code&gt; disk image that&amp;rsquo;ll be converted into the AMI&amp;rsquo;s root volume.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ truncate -s 64G ami-template.img
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, to create the VM, I need to specify the hardware configuration to
use. I do this using the following Xen VM configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat &amp;lt;&amp;lt;EOF &amp;gt; ami-template.cfg
&amp;gt; builder=&#39;hvm&#39;
&amp;gt; name=&#39;ami-template&#39;
&amp;gt; vcpus=4
&amp;gt; memory=4096
&amp;gt; vif=[&#39;bridge=xenbr0, type=ioemu&#39;]
&amp;gt; disk=[  &#39;file:/root/OpenIndiana_Text_X86.iso,hdb:cdrom,r&#39;,
&amp;gt;         &#39;file:/root/ami-template.img,xvda,w&#39; ]
&amp;gt; boot=&#39;d&#39;
&amp;gt; vnc=1
&amp;gt; vnclisten=&#39;0.0.0.0&#39;
&amp;gt; vncconsole=1
&amp;gt; on_crash=&#39;preserve&#39;
&amp;gt; xen_platform_pci=1
&amp;gt; serial=&#39;pty&#39;
&amp;gt; on_reboot=&#39;destroy&#39;
&amp;gt; EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For those unfamilar with Xen&amp;rsquo;s configuration files, this states that the
VM will be given:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;4 CPUs&lt;/li&gt;
&lt;li&gt;4G of RAM&lt;/li&gt;
&lt;li&gt;The installation ISO will be attached as a CDROM&lt;/li&gt;
&lt;li&gt;The sparse file generated above will be used as the VM&amp;rsquo;s only disk&lt;/li&gt;
&lt;li&gt;The console will be displayed over &lt;a href=&#34;https://en.wikipedia.org/wiki/Virtual_Network_Computing&#34;&gt;VNC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;etc&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With that configuration file generated, we can go ahead and create/start
the VM with the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ xm create ami-template.cfg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the VM running and it&amp;rsquo;s console being displayed over VNC, I can
then connect to the console and manually walk through the installer&amp;rsquo;s
instructions. After the installer completes, we&amp;rsquo;ll have a disk image
(the &lt;code&gt;ami-template.img&lt;/code&gt; file) that&amp;rsquo;ll be uploaded to Amazon and used to
generate the AMI in later steps.&lt;/p&gt;

&lt;h2 id=&#34;step-1-convert-raw-disk-image-into-stream-optimized-vmdk-format&#34;&gt;Step 1: Convert Raw Disk Image into Stream Optimized VMDK Format&lt;/h2&gt;

&lt;p&gt;Now that we&amp;rsquo;ve run the OI Hipster installer to completion, we should
have a &lt;code&gt;ami-template.img&lt;/code&gt; file that contains a complete installation of
our operating system. While we &lt;em&gt;could&lt;/em&gt; upload directly to Amazon as-is,
we won&amp;rsquo;t do this as it&amp;rsquo;d be an inefficient use of space (and time).&lt;/p&gt;

&lt;p&gt;Remember that when we generated the file that we attached to the VM in
the &lt;a href=&#34;#step-0-create-template-for-root-volume-of-ami&#34;&gt;previous step&lt;/a&gt;, we used a sparse file; we can use &lt;code&gt;ls&lt;/code&gt; to
see how much space was saved by doing so (as opposed to a non-sparse
file):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls -lsh ami-template.img
3.6G -rw-r--r-- 1 root root 64G Feb  5 22:10 ami-template.img
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From this output, we can see that while the file is 64G in size, it&amp;rsquo;s
only taking up 3.6G of space. Thus, it&amp;rsquo;d be great if we could upload
only 3.6G (or less) worth of data to Amazon, rather than the full 64G
(most of which would be zeros).&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s what this step is about; rather than uploading the
&lt;code&gt;ami-template.img&lt;/code&gt; file as-is, which would result in 64G of data being
transferred over the network, we&amp;rsquo;ll convert the file into a &amp;ldquo;stream
optimized&amp;rdquo; VMDK and upload this converted file. As a result, we&amp;rsquo;ll only
have to send a small fraction (of the original file&amp;rsquo;s size) of data over
the network, when compared to if we hadn&amp;rsquo;t done this conversion; which
is a huge benefit in terms of the latency required to perform the
upload.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll use the &lt;code&gt;VMDKStream.py&lt;/code&gt; utility to do the conversion, so first we
need to download this tool:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ wget -O VMDK-stream-converter-0.2.tar.gz \
    https://github.com/imcleod/VMDK-stream-converter/archive/0.2.tar.gz

$ tar -xf VMDK-stream-converter-0.2.tar.gz

$ ls VMDK-stream-converter-0.2
COPYING  README  setup.py  VMDKstream.py
root@kvmserver1:~/psurya# ls -l VMDK-stream-converter-0.2
total 40
-rw-rw-r-- 1 root root 18092 Jun 29  2011 COPYING
-rw-rw-r-- 1 root root   576 Jun 29  2011 README
-rw-rw-r-- 1 root root   120 Jun 29  2011 setup.py
-rwxrwxr-x 1 root root 11454 Jun 29  2011 VMDKstream.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now we can use it to read the original &lt;code&gt;raw&lt;/code&gt; disk image, and convert
it into the stream optimized &lt;code&gt;vmdk&lt;/code&gt; that we want:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./VMDK-stream-converter-0.2/VMDKstream.py ami-template.img ami-template.vmdk
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this completes, we can use &lt;code&gt;ls&lt;/code&gt; again to see just how much less
data will be needed to transfer the disk image using this new format:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls -lsh ami-template.img ami-template.vmdk
 3.6G -rw-r--r-- 1 root root   64G Feb  5 22:10 ami-template.img
1022M -rw-r--r-- 1 root root 1022M Feb  5 22:35 ami-template.vmdk
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As one can see, the converted file is &lt;strong&gt;much&lt;/strong&gt; smaller than even the
sparse file that we started with; rather than sending 64G over the
network, we&amp;rsquo;ll only have to send about 1G.&lt;/p&gt;

&lt;p&gt;Now with our stream optimized VMDK file generated, we can move on to
actually performing the upload of this file to Amazon.&lt;/p&gt;

&lt;h2 id=&#34;step-2-download-ec2-tools-and-initialize-environment&#34;&gt;Step 2: Download EC2 Tools and Initialize Environment&lt;/h2&gt;

&lt;p&gt;To perform the upload of the VMDK file that we had just generated, as
well as the various other steps involved in creating the AMI, we&amp;rsquo;ll use
the EC2 API Tools provided by Amazon. Thus, the first thing we need to
do, is to download these tools (assuming they aren&amp;rsquo;t already installed).&lt;/p&gt;

&lt;h3 id=&#34;step-2-1-download-ec2-api-tools&#34;&gt;Step 2.1: Download EC2 API Tools&lt;/h3&gt;

&lt;p&gt;This is simple, using &lt;code&gt;wget&lt;/code&gt; and &lt;code&gt;unzip&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ wget http://s3.amazonaws.com/ec2-downloads/ec2-api-tools.zip
$ unzip ec2-api-tools.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The tools will be extracted into a directory named &lt;code&gt;ec2-api-tools&lt;/code&gt;, and
postfixed with the version of the tools downloaded. In this example,
version &lt;code&gt;1.7.5.1&lt;/code&gt; was downloaded, so the directory containing the tools
will be &lt;code&gt;ec2-api-tools-1.7.5.1&lt;/code&gt;, and we can verify this using &lt;code&gt;ls&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls -l ec2-api-tools-1.7.5.1/
total 100
drwxr-xr-x 2 root root 36864 Sep  7  2015 bin
drwxr-xr-x 2 root root  4096 Sep  7  2015 lib
-rw-r--r-- 1 root root  4852 Sep  7  2015 license.txt
-rw-r--r-- 1 root root   539 Sep  7  2015 notice.txt
-rw-r--r-- 1 root root 46468 Sep  7  2015 THIRDPARTYLICENSE.TXT
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-2-2-initialize-necessary-environment-variables&#34;&gt;Step 2.2: Initialize Necessary Environment Variables&lt;/h3&gt;

&lt;p&gt;In conjunction with the EC2 API Tools, we&amp;rsquo;ll also make use of the
following environment variables to configure the invocation of the
tools. The following is a list of the environment variables that we&amp;rsquo;ll
use in the following sections, as well as a brief description of each:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;AWS_ACCESS_KEY&lt;/code&gt;: This is required so the tools can authenticate as
&amp;ldquo;you&amp;rdquo; when making API request to Amazon. This needs to be set based
on each individual&amp;rsquo;s specific key. For more information, see
&lt;a href=&#34;https://aws.amazon.com/developers/access-keys/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;AWS_SECRET_KEY&lt;/code&gt;: In addition to the &amp;ldquo;access key&amp;rdquo; described above,
authenticating with the Amazon APIs also requires a &amp;ldquo;secret key&amp;rdquo;.
Exactly like the &amp;ldquo;access key&amp;rdquo;, this must be set based on the
individual&amp;rsquo;s specific key. See &lt;a href=&#34;https://aws.amazon.com/developers/access-keys/&#34;&gt;here&lt;/a&gt; for more
information.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;AWS_ZONE&lt;/code&gt;: This will specify the AWS availability zone that will be
used when generating the AMI. For more information about AWS
availability zones, see &lt;a href=&#34;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;AWS_S3_BUCKET&lt;/code&gt;: This will specify the AWS S3 bucket used when
uploading the disk image. The disk image will be uploaded to this
bucket, and then a snapshot of the generated volume will be taken,
and this snapshot used to create the root volume of the AMI. For
more information about Amazon S3, see &lt;a href=&#34;https://aws.amazon.com/documentation/s3/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;AWS_AMI_NAME&lt;/code&gt;: This will specify the name given to the AMI.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;AWS_AMI_DESC&lt;/code&gt;: This will specify the description given to the AMI.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following is intended to serve as an example of the values that
could be used for these various environment variables:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ export AWS_ACCESS_KEY=AKIAIOSFODNN7EXAMPLE
$ export AWS_SECRET_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
$ export AWS_ZONE=us-west-1a
$ export AWS_S3_BUCKET=ivol-openindiana-hipster
$ export AWS_AMI_NAME=&amp;quot;OpenIndiana Hipster Testing 2017.02.06 (HVM)&amp;quot;
$ export AWS_AMI_DESC=&amp;quot;Hipster is a codename for rapidly moving \
&amp;gt; development branch of OpenIndiana and the development branch from \
&amp;gt; which major releases are made.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-3-import-the-stream-optimized-vmdk-to-amazon-s3&#34;&gt;Step 3: Import the Stream Optimized VMDK to Amazon S3&lt;/h2&gt;

&lt;p&gt;Now that we have the EC2 API Tools installed, and the necessary
environment variables initialized, we can start the process of uploading
our disk image to Amazon, and converting that into an AMI.&lt;/p&gt;

&lt;p&gt;The first step of this proces is to upload our stream optimized VMDK
(generated in &lt;a href=&#34;#step-1-convert-raw-disk-image-into-stream-optimized-vmdk-format&#34;&gt;step 1&lt;/a&gt;) to our Amazon S3 bucket; to do this,
we&amp;rsquo;ll use the &lt;code&gt;ec2ivol&lt;/code&gt; utility:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./ec2-api-tools-1.7.5.1/bin/ec2ivol -o $AWS_ACCESS_KEY \
&amp;gt; -w $AWS_SECRET_KEY -b $AWS_S3_BUCKET -z $AWS_ZONE \
&amp;gt; -d &amp;quot;$AWS_AMI_DESCRIPTION&amp;quot; -f vmdk ami-template.vmdk
Requesting volume size: 64 GB
TaskType        IMPORTVOLUME    TaskId  import-vol-fghpxu3l     ExpirationTime  2017-02-13T20:39:29Z    Status  active  StatusMessage   Pending
DISKIMAGE       DiskImageFormat VMDK    DiskImageSize   1070948352      VolumeSize      64      AvailabilityZone        us-west-1a      ApproximateBytesConverted       0
Creating new manifest at ivol-openindiana-hipster/0af50aa3-ee80-492d-96a5-bab6ab63bda4/ami-template.vmdkmanifest.xml
Uploading the manifest file
Uploading 1070948352 bytes across 103 parts
----------------------------------------------------------------------------------------------------
   Upload progress              Estimated time      Estimated speed
 / 100% [====================&amp;gt;]                     56.056 MBps
********************* All 1070948352 Bytes uploaded in 19s  *********************
Done uploading.
Average speed was 56.053 MBps
The disk image for import-vol-fghpxu3l has been uploaded to Amazon S3
where it is being converted into an EBS volume.  You may monitor the
progress of this task by running ec2-describe-conversion-tasks.  When
the task is completed, you may use ec2-delete-disk-image to remove the
image from S3.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can then use the &lt;code&gt;TaskId&lt;/code&gt; value provided by the output of &lt;code&gt;ec2ivol&lt;/code&gt;
(i.e. &lt;code&gt;import-vol-fghpxu3l&lt;/code&gt; in this instance), and feed that into
&lt;code&gt;ec2dct&lt;/code&gt; to retreive the status for the upload&amp;rsquo;s conversion.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./ec2-api-tools-1.7.5.1/bin/ec2dct import-vol-fghpxu3l
TaskType        IMPORTVOLUME    TaskId  import-vol-fghpxu3l     ExpirationTime  2017-02-13T20:39:29Z    Status  completed
DISKIMAGE       DiskImageFormat VMDK    DiskImageSize   1070948352      VolumeId        vol-041fd3aa8c9435e7d   VolumeSize      64      AvailabilityZone        us-west-1a      ApproximateBytesConverted       1070945104
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As can be seen from the &lt;code&gt;Status&lt;/code&gt; section, this conversion has &lt;code&gt;completed&lt;/code&gt;,
so we can move on to the next step. If the conversion hadn&amp;rsquo;t &lt;code&gt;completed&lt;/code&gt;
yet, e.g. it was still &lt;code&gt;active&lt;/code&gt;, then we would need to wait (and poll
using &lt;code&gt;ec2dct&lt;/code&gt;) until it &lt;code&gt;completed&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;step-4-create-a-snapshot-of-imported-volume&#34;&gt;Step 4: Create a Snapshot of Imported Volume&lt;/h2&gt;

&lt;p&gt;The next step that we need to perform, is to create a snapshot from the
volume that we just created. Looking at the prior output from &lt;code&gt;ec2dct&lt;/code&gt;,
we can see from the &lt;code&gt;VolumeId&lt;/code&gt; field, that a volume was generated and
it&amp;rsquo;s ID is &lt;code&gt;vol-041fd3aa8c9435e7d&lt;/code&gt;. We will use the &lt;code&gt;ec2addsnap&lt;/code&gt; utility
to create a snapshot of that volume:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./ec2-api-tools-1.7.5.1/bin/ec2addsnap vol-041fd3aa8c9435e7d
SNAPSHOT        snap-01b80a642ef5f1f51  vol-041fd3aa8c9435e7d   pending 2017-02-06T20:49:11+0000                239688353806    64              Not Encrypted
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just like when importing the volume, we can check the status of the
snapshot generation process using &lt;code&gt;ec2dsnap&lt;/code&gt; (the parameter passed to it
comes from the the output of &lt;code&gt;ec2addsnap&lt;/code&gt; above):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ while true; do
&amp;gt; ./ec2-api-tools-1.7.5.1/bin/ec2dsnap snap-01b80a642ef5f1f51
&amp;gt; sleep 60
&amp;gt; done
SNAPSHOT        snap-01b80a642ef5f1f51  vol-041fd3aa8c9435e7d   pending 2017-02-06T20:49:11+0000        0%      239688353806    64              Not Encrypted
SNAPSHOT        snap-01b80a642ef5f1f51  vol-041fd3aa8c9435e7d   pending 2017-02-06T20:49:11+0000        0%      239688353806    64              Not Encrypted
SNAPSHOT        snap-01b80a642ef5f1f51  vol-041fd3aa8c9435e7d   completed       2017-02-06T20:49:11+0000        100%    239688353806    64              Not Encrypted
^C
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-5-register-ami-using-previously-created-volume-snapshot&#34;&gt;Step 5: Register AMI Using Previously Created Volume Snapshot&lt;/h2&gt;

&lt;p&gt;Finally, now that we have the volume snapshot generated, we can use this
to register our new custom AMI using &lt;code&gt;ec2reg&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./ec2-api-tools-1.7.5.1/bin/ec2reg -s snap-01b80a642ef5f1f51 \
&amp;gt; -d &amp;quot;$AWS_AMI_DESC&amp;quot; -n &amp;quot;$AWS_AMI_NAME&amp;quot; -a x86_64 \
&amp;gt; --root-device-name /dev/xvda --virtualization-type hvm
IMAGE   ami-5b065a3b
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Success! The new custom built AMI is &lt;code&gt;ami-5b065a3b&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It should now be possible to use this AMI to create new Amazon EC2
instances.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Creating Custom Installation Media for OI Hipster</title>
      <link>https://www.prakashsurya.com/post/2017-02-01-creating-custom-istallation-media-for-oi-hipster/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 -0800</pubDate>
      
      <guid>https://www.prakashsurya.com/post/2017-02-01-creating-custom-istallation-media-for-oi-hipster/</guid>
      <description>

&lt;h2 id=&#34;preface&#34;&gt;Preface&lt;/h2&gt;

&lt;p&gt;This post is a write up of my notes for creating custom installation
media for &lt;a href=&#34;https://www.openindiana.org/overview/the-hipster-branch/&#34;&gt;OpenIndiana Hipster&lt;/a&gt;, using a custom/patched
version of &lt;a href=&#34;https://illumos.org&#34;&gt;illumos&lt;/a&gt;. It assumes that OI Hipster has already
been installed on a machine (e.g. installed on a VM using their
&lt;a href=&#34;https://www.openindiana.org/download/&#34;&gt;provided&lt;/a&gt; installation media); and this server will be
used to build our custom version of illumos, as well as the custom OI
installation media. The goal of this exercise is to create a &amp;ldquo;Live DVD&amp;rdquo;
that can be used to install our custom version of illumos.&lt;/p&gt;

&lt;h2 id=&#34;shoutouts&#34;&gt;Shoutouts&lt;/h2&gt;

&lt;p&gt;Before I get started, I want to thank &lt;code&gt;alp&lt;/code&gt; and &lt;code&gt;tsoome&lt;/code&gt; from the
&lt;code&gt;#oi-dev&lt;/code&gt; IRC channel on freenode for answering my various questions as
I was learning how to do this; their help definitely saved me hours of
frustration. Thanks again :)&lt;/p&gt;

&lt;h2 id=&#34;step-1-fetch-illumos&#34;&gt;Step 1: Fetch illumos&lt;/h2&gt;

&lt;p&gt;The illumos repository &lt;a href=&#34;https://github.com/illumos/illumos-gate&#34;&gt;is on GitHub&lt;/a&gt;, so we&amp;rsquo;ll use this to
obtain our copy. First, we must install &lt;code&gt;git&lt;/code&gt; on the server:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo pkg install git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and then we can use &lt;code&gt;git clone&lt;/code&gt; to fetch the code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/illumos/illumos-gate.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-2-prep-for-building-illumos&#34;&gt;Step 2: Prep for Building illumos&lt;/h2&gt;

&lt;p&gt;Now we can move on to compiling the illumos codebase; we&amp;rsquo;ll use the
&lt;a href=&#34;https://wiki.illumos.org/display/illumos/How+To+Build+illumos&#34;&gt;documented process&lt;/a&gt; as a guide. We need to
download and install all the required build tools (e.g. compilers, etc),
which can can be easily done using the &lt;code&gt;build-essentials&lt;/code&gt; meta-package:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo pkg install build-essential
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-2-1-download-and-unpack-closed-binaries&#34;&gt;Step 2.1: Download and Unpack Closed Binaries&lt;/h3&gt;

&lt;p&gt;After that completes, we have to download and unpack the &amp;ldquo;closed
binaries&amp;rdquo;; these are closed source components from Sun/Oracle that are
required to build illumos (and have not yet been replaced):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd illumos-gate/
$ wget -c \
    https://download.joyent.com/pub/build/illumos/on-closed-bins.i386.tar.bz2 \
    https://download.joyent.com/pub/build/illumos/on-closed-bins-nd.i386.tar.bz2
$ tar xjvpf on-closed-bins.i386.tar.bz2
$ tar xjvpf on-closed-bins-nd.i386.tar.bz2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-2-2-configure-environment-file-illumos-sh&#34;&gt;Step 2.2: Configure Environment File &amp;ndash; illumos.sh&lt;/h3&gt;

&lt;p&gt;The illumos build system is configured using an &amp;ldquo;environment&amp;rdquo; file. This
file contains various environment variables that the build uses to
determine what actions it will take; for example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Should it run lint checks?&lt;/li&gt;
&lt;li&gt;Should it perform a &amp;ldquo;debug&amp;rdquo; or &amp;ldquo;non-debug&amp;rdquo; build? Or both?&lt;/li&gt;
&lt;li&gt;etc&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For our purposes, we&amp;rsquo;ll leave all of the default values, and only make
the minimal modifications necessary:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cp usr/src/tools/env/illumos.sh .
$ PKGVERS_BRANCH=$(pkg info  -r pkg://openindiana.org/SUNWcs | \
&amp;gt;                  awk &#39;$1 == &amp;quot;Branch:&amp;quot; {print $2}&#39;)
$ echo &amp;quot;export PKGVERS_BRANCH=&#39;$PKGVERS_BRANCH&#39;&amp;quot; &amp;gt;&amp;gt; illumos.sh
$ echo &amp;quot;export ONNV_BUILDNUM=&#39;$PKGVERS_BRANCH&#39;&amp;quot; &amp;gt;&amp;gt; illumos.sh
$ echo &amp;quot;export PERL_VERSION=&#39;5.22&#39;&amp;quot; &amp;gt;&amp;gt; illumos.sh
$ echo &amp;quot;export PERL_PKGVERS=&#39;-522&#39;&amp;quot; &amp;gt;&amp;gt; illumos.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-3-build-illumos&#34;&gt;Step 3: Build illumos&lt;/h2&gt;

&lt;p&gt;Now we&amp;rsquo;re ready to start the build. This is expected to take a couple
hours to complete, so I&amp;rsquo;d recommend using a program such as &lt;code&gt;screen&lt;/code&gt; or
&lt;code&gt;tmux&lt;/code&gt;. That way, if the connection with the server performing the build
were to fail, the build process will remain running. For this guide I&amp;rsquo;ll
use &lt;code&gt;screen&lt;/code&gt;, since it&amp;rsquo;s already installed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ screen -S illumos-build
$ cp usr/src/tools/scripts/nightly.sh .
$ chmod +x nightly.sh
$ time ./nightly.sh illumos.sh

real    123m31.031s
user    178m14.443s
sys     42m54.293s
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-4-prep-for-building-the-installation-media&#34;&gt;Step 4: Prep for Building the Installation Media&lt;/h2&gt;

&lt;p&gt;In order to build the installation media, we need to use the
&lt;code&gt;distro_const&lt;/code&gt; command, which is provided by the
&lt;code&gt;distribution-constructor&lt;/code&gt; package:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo pkg install distribution-constructor
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To use &lt;code&gt;distro_const&lt;/code&gt;, we must pass it a &amp;ldquo;manifest&amp;rdquo; file, which is
nothing more than a specially formatted XML file. We&amp;rsquo;ll start with a
manifest template provided by the package, and then tweak the template
to suite our needs.&lt;/p&gt;

&lt;h3 id=&#34;step-4-1-copy-distro-const-manifest-template&#34;&gt;Step 4.1: Copy distro_const Manifest Template&lt;/h3&gt;

&lt;p&gt;First, we need to copy the template so we can make modifications to it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd ~
$ cp /usr/share/distro_const/text_install/text_mode_x86.xml .
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-4-1-replace-dev-ips-repository-with-hipster&#34;&gt;Step 4.1: Replace &amp;ldquo;dev&amp;rdquo; IPS Repository with &amp;ldquo;hipster&amp;rdquo;&lt;/h3&gt;

&lt;p&gt;The first modification we need to make, is to point to the &amp;ldquo;hipster&amp;rdquo;
&lt;a href=&#34;https://en.wikipedia.org/wiki/Image_Packaging_System&#34;&gt;IPS&lt;/a&gt; repository as opposed to the default &amp;ldquo;dev&amp;rdquo; repository. To do
this, we need to locate the &lt;code&gt;pkg_repo_default_authority&lt;/code&gt; and
&lt;code&gt;post_install_repo_default_authority&lt;/code&gt; sections, and replace
&lt;code&gt;http://pkg.openindiana.org/dev&lt;/code&gt; with
&lt;code&gt;http://pkg.openindiana.org/hipster&lt;/code&gt;. Here&amp;rsquo;s &lt;code&gt;diff&lt;/code&gt; of this change:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ diff -u text_mode_x86.xml text_mode_x86.xml.orig
--- text_mode_x86.xml.orig      Thu Feb  2 02:09:32 2017
+++ text_mode_x86.xml           Thu Feb  2 02:10:33 2017
@@ -192,7 +192,7 @@
                --&amp;gt;
                &amp;lt;pkg_repo_default_authority&amp;gt;
                        &amp;lt;main
-                               url=&amp;quot;http://pkg.openindiana.org/dev&amp;quot;
+                               url=&amp;quot;http://pkg.openindiana.org/hipster&amp;quot;
                                authname=&amp;quot;openindiana.org&amp;quot;/&amp;gt;
                        &amp;lt;!--
                             If you want to use one or more  mirrors that are
@@ -229,7 +229,7 @@
                --&amp;gt;
                &amp;lt;post_install_repo_default_authority&amp;gt;
                        &amp;lt;main
-                               url=&amp;quot;http://pkg.openindiana.org/dev&amp;quot;
+                               url=&amp;quot;http://pkg.openindiana.org/hipster&amp;quot;
                                authname=&amp;quot;openindiana.org&amp;quot;/&amp;gt;
                        &amp;lt;!--
                             Uncomment before using.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-4-2-point-to-ips-repository-from-custom-illumos-build&#34;&gt;Step 4.2: Point to IPS Repository from Custom illumos Build&lt;/h3&gt;

&lt;p&gt;As part of illumos build in &lt;a href=&#34;#step-3-build-illumos&#34;&gt;step 3&lt;/a&gt;, an IPS
repository was generated under the &lt;code&gt;packages/i386/nightly/repo.redist&lt;/code&gt;
directory. Since my illumos codebase is stored in the directory,
&lt;code&gt;/export/home/ps/illumos-gate&lt;/code&gt;, the full path to this IPS repository is
&lt;code&gt;/export/home/ps/illumos-gate/packages/i386/nightly/repo.redist&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In order for the installation media to use my custom built version of
illumos, the manifest needs to be modified to point to this IPS
repository, &lt;strong&gt;in addition to&lt;/strong&gt; the default OI &amp;ldquo;hipster&amp;rdquo; repository. It&amp;rsquo;s
important to note, that we&amp;rsquo;re not replacing the &amp;ldquo;hipster&amp;rdquo; repository
with the custom illumos build&amp;rsquo;s repository; rather, we want to use the
build&amp;rsquo;s repository as the &amp;ldquo;main&amp;rdquo; repository, and the &amp;ldquo;hipster&amp;rdquo;
repository as an &amp;ldquo;additional&amp;rdquo; repository.&lt;/p&gt;

&lt;p&gt;To do this, we&amp;rsquo;ll modify the &lt;code&gt;url&lt;/code&gt; specified in the
&lt;code&gt;pkg_repo_default_authority&lt;/code&gt; section to point to the illumos build&amp;rsquo;s
repository, using a &lt;code&gt;file://&lt;/code&gt; based URL, and we&amp;rsquo;ll modify the &lt;code&gt;url&lt;/code&gt; of
the &lt;code&gt;pkg_repo_addl_authority&lt;/code&gt; section to point to the original &amp;ldquo;hipster&amp;rdquo;
IPS repository. Here&amp;rsquo;s a diff of these changes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ diff -u text_mode_x86.xml.orig text_mode_x86.xml
--- text_mode_x86.xml.orig      Thu Feb  2 02:18:19 2017
+++ text_mode_x86.xml           Thu Feb  2 02:19:45 2017
@@ -192,8 +192,8 @@
                --&amp;gt;
                &amp;lt;pkg_repo_default_authority&amp;gt;
                        &amp;lt;main
-                               url=&amp;quot;http://pkg.openindiana.org/hipster&amp;quot;
-                               authname=&amp;quot;openindiana.org&amp;quot;/&amp;gt;
+                               url=&amp;quot;file:///export/home/ps/illumos-gate/packages/i386/nightly/repo.redist&amp;quot;
+                               authname=&amp;quot;on-nightly&amp;quot;/&amp;gt;
                        &amp;lt;!--
                             If you want to use one or more  mirrors that are
                             setup for the authority, specify the urls here.
@@ -210,15 +210,12 @@
                     If you want to use one or more  mirrors that are
                     setup for the authority, specify the urls here.
                --&amp;gt;
-               &amp;lt;!--
-                    Uncomment before using.
                &amp;lt;pkg_repo_addl_authority&amp;gt;
                        &amp;lt;main
-                               url=&amp;quot;&amp;quot;
-                               authname=&amp;quot;&amp;quot;/&amp;gt;
+                               url=&amp;quot;http://pkg.openindiana.org/hipster&amp;quot;
+                               authname=&amp;quot;openindiana.org&amp;quot;/&amp;gt;
                        &amp;lt;mirror url=&amp;quot;&amp;quot; /&amp;gt;
                &amp;lt;/pkg_repo_addl_authority&amp;gt;
-               --&amp;gt;
                &amp;lt;!--
                     The default preferred authority to be used by the system
                     after it has been installed.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-4-3-use-oi-repository-for-ssh-and-ftp-packages&#34;&gt;Step 4.3: Use OI Repository for &amp;ldquo;ssh&amp;rdquo; and &amp;ldquo;ftp&amp;rdquo; Packages&lt;/h3&gt;

&lt;p&gt;I don&amp;rsquo;t fully understand why this step is necessary, but we need to
modify the manifest to force the use of the OpenIndiana&amp;rsquo;s IPS repository
when fetching the following packages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pkg:/network/ssh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pkg:/service/network/ftp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pkg:/service/network/ssh&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is done by adding the package URL for these packages to the
&lt;code&gt;packages&lt;/code&gt; section of the manifest; the following &lt;code&gt;diff&lt;/code&gt; does this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ diff -u text_mode_x86.xml.orig text_mode_x86.xml
--- text_mode_x86.xml.orig      Thu Feb  2 03:38:37 2017
+++ text_mode_x86.xml           Thu Feb  2 03:56:46 2017
@@ -266,6 +266,9 @@
                        &amp;lt;pkg name=&amp;quot;pkg:/server_install&amp;quot;/&amp;gt;
                        &amp;lt;pkg name=&amp;quot;pkg:/system/install/text-install&amp;quot;/&amp;gt;
                        &amp;lt;pkg name=&amp;quot;pkg:/system/install/media/internal&amp;quot;/&amp;gt;
+                       &amp;lt;pkg name=&amp;quot;pkg://openindiana.org/network/ssh&amp;quot;/&amp;gt;
+                       &amp;lt;pkg name=&amp;quot;pkg://openindiana.org/service/network/ftp&amp;quot;/&amp;gt;
+                       &amp;lt;pkg name=&amp;quot;pkg://openindiana.org/service/network/ssh&amp;quot;/&amp;gt;
                &amp;lt;/packages&amp;gt;
 &amp;lt;!--
      Items below this line are rarely configured
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-4-4-remove-certain-packages-from-illumos-build-repository&#34;&gt;Step 4.4: Remove Certain Packages from illumos Build Repository&lt;/h3&gt;

&lt;p&gt;I understand even less about why this step is necessary, but we need to
remove certain packages from the IPS repository generated by the
previous illumos build (the build from &lt;a href=&#34;#step-3-build-illumos&#34;&gt;step 3&lt;/a&gt;),
otherwise the &lt;a href=&#34;#step-5-building-the-installation-media&#34;&gt;next step&lt;/a&gt; will
fail to build the installation media. The packages we need to remove
are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pkg:/network/ssh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pkg:/service/network/ssh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pkg:/service/network/ftp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pkg:/service/network/ssh-common&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pkg:/service/network/smtp/sendmail&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can use &lt;code&gt;pkgrepo&lt;/code&gt; to remove them like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ REPO=&amp;quot;/export/home/ps/illumos-gate/packages/i386/nightly/repo.redist&amp;quot;
$ for pkg in &amp;quot;pkg:/network/ssh&amp;quot; \
&amp;gt;            &amp;quot;pkg:/service/network/ssh&amp;quot; \
&amp;gt;            &amp;quot;pkg:/service/network/ftp&amp;quot; \
&amp;gt;            &amp;quot;pkg:/service/network/ssh-common&amp;quot; \
&amp;gt;            &amp;quot;pkg:/service/network/smtp/sendmail&amp;quot;; do
&amp;gt;     pkgrepo -s &amp;quot;$REPO&amp;quot; remove &amp;quot;$pkg&amp;quot;
&amp;gt; done
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-5-building-the-installation-media&#34;&gt;Step 5: Building the Installation Media&lt;/h2&gt;

&lt;p&gt;Now, with all of the above steps completed, we&amp;rsquo;re ready to use
&lt;code&gt;distro_const&lt;/code&gt; to build the installation media files; this part is
simple:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo distro_const build text_mode_x86.xml
... &amp;lt;snip&amp;gt; ...
Build completed Thu Feb  2 05:26:06 2017
Build is successful.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After that completes, the installation media should be found in
&lt;code&gt;/rpool/dc/media&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls -lh /rpool/dc/media/
total 2793956
-rw-r--r--   1 root     root        657M Feb  2 05:25 OpenIndiana_Text_X86.iso
-r--r--r--   1 root     root        793M Feb  2 05:25 OpenIndiana_Text_X86.usb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Success!&lt;/p&gt;

&lt;p&gt;Those files can now be used to install our custom OpenIndiana Hipster
distribution onto any machine of our choosing (e.g. a VM, bare metal,
etc), and the installed operating system will be our custom version of
illumos, plus all additional packages packages that constitute OI
Hipster.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>